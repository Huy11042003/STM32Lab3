
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002eb8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fe8  08002fe8  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08002fe8  08002fe8  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fe8  08002fe8  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fe8  08002fe8  00012fe8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fec  08002fec  00012fec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08002ff0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000058  08003048  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003048  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY
 13 .debug_info   000089c0  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cad  00000000  00000000  00028a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  0002a738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000080b  00000000  00000000  0002b1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016ce8  00000000  00000000  0002b9d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c29b  00000000  00000000  000426bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000825a4  00000000  00000000  0004e956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000298c  00000000  00000000  000d0efc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  000d3888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fac 	.word	0x08002fac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	08002fac 	.word	0x08002fac

0800014c <isButtonPressed>:

int TimeOutForKeyPress = 500;
int button_flag[BUTTONS_NUMBER] = {0,0,0};


int isButtonPressed(int i){
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (button_flag[i] == 1){
 8000154:	4a09      	ldr	r2, [pc, #36]	; (800017c <isButtonPressed+0x30>)
 8000156:	687b      	ldr	r3, [r7, #4]
 8000158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800015c:	2b01      	cmp	r3, #1
 800015e:	d106      	bne.n	800016e <isButtonPressed+0x22>
		button_flag[i] = 0;
 8000160:	4a06      	ldr	r2, [pc, #24]	; (800017c <isButtonPressed+0x30>)
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	2100      	movs	r1, #0
 8000166:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 800016a:	2301      	movs	r3, #1
 800016c:	e000      	b.n	8000170 <isButtonPressed+0x24>
	}
	return 0;
 800016e:	2300      	movs	r3, #0

}
 8000170:	4618      	mov	r0, r3
 8000172:	370c      	adds	r7, #12
 8000174:	46bd      	mov	sp, r7
 8000176:	bc80      	pop	{r7}
 8000178:	4770      	bx	lr
 800017a:	bf00      	nop
 800017c:	20000074 	.word	0x20000074

08000180 <subKeyProcess>:

void subKeyProcess(int i){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
	button_flag[i] = 1;
 8000188:	4a04      	ldr	r2, [pc, #16]	; (800019c <subKeyProcess+0x1c>)
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	2101      	movs	r1, #1
 800018e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000192:	bf00      	nop
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr
 800019c:	20000074 	.word	0x20000074

080001a0 <getKeyInput>:

void getKeyInput(){
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b082      	sub	sp, #8
 80001a4:	af00      	add	r7, sp, #0
for(int i=0; i<BUTTONS_NUMBER; i++){
 80001a6:	2300      	movs	r3, #0
 80001a8:	607b      	str	r3, [r7, #4]
 80001aa:	e063      	b.n	8000274 <getKeyInput+0xd4>
  KeyReg2[i] = KeyReg1[i];
 80001ac:	4a35      	ldr	r2, [pc, #212]	; (8000284 <getKeyInput+0xe4>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001b4:	4934      	ldr	r1, [pc, #208]	; (8000288 <getKeyInput+0xe8>)
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg1[i] = KeyReg0[i];
 80001bc:	4a33      	ldr	r2, [pc, #204]	; (800028c <getKeyInput+0xec>)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001c4:	492f      	ldr	r1, [pc, #188]	; (8000284 <getKeyInput+0xe4>)
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  KeyReg0[i] = HAL_GPIO_ReadPin(GPIOA, buttonsArr[i]);
 80001cc:	4a30      	ldr	r2, [pc, #192]	; (8000290 <getKeyInput+0xf0>)
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80001d4:	b29b      	uxth	r3, r3
 80001d6:	4619      	mov	r1, r3
 80001d8:	482e      	ldr	r0, [pc, #184]	; (8000294 <getKeyInput+0xf4>)
 80001da:	f001 fead 	bl	8001f38 <HAL_GPIO_ReadPin>
 80001de:	4603      	mov	r3, r0
 80001e0:	4619      	mov	r1, r3
 80001e2:	4a2a      	ldr	r2, [pc, #168]	; (800028c <getKeyInput+0xec>)
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 80001ea:	4a26      	ldr	r2, [pc, #152]	; (8000284 <getKeyInput+0xe4>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80001f2:	4926      	ldr	r1, [pc, #152]	; (800028c <getKeyInput+0xec>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d137      	bne.n	800026e <getKeyInput+0xce>
 80001fe:	4a21      	ldr	r2, [pc, #132]	; (8000284 <getKeyInput+0xe4>)
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000206:	4920      	ldr	r1, [pc, #128]	; (8000288 <getKeyInput+0xe8>)
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800020e:	429a      	cmp	r2, r3
 8000210:	d12d      	bne.n	800026e <getKeyInput+0xce>
    if (KeyReg2[i] != KeyReg3[i]){
 8000212:	4a1d      	ldr	r2, [pc, #116]	; (8000288 <getKeyInput+0xe8>)
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800021a:	491f      	ldr	r1, [pc, #124]	; (8000298 <getKeyInput+0xf8>)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000222:	429a      	cmp	r2, r3
 8000224:	d015      	beq.n	8000252 <getKeyInput+0xb2>
      KeyReg3[i] = KeyReg2[i];
 8000226:	4a18      	ldr	r2, [pc, #96]	; (8000288 <getKeyInput+0xe8>)
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <getKeyInput+0xf8>)
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

      if (KeyReg3[i] == PRESSED_STATE){
 8000236:	4a18      	ldr	r2, [pc, #96]	; (8000298 <getKeyInput+0xf8>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800023e:	2b00      	cmp	r3, #0
 8000240:	d115      	bne.n	800026e <getKeyInput+0xce>
        TimeOutForKeyPress = 500;
 8000242:	4b16      	ldr	r3, [pc, #88]	; (800029c <getKeyInput+0xfc>)
 8000244:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000248:	601a      	str	r2, [r3, #0]
        subKeyProcess(i);
 800024a:	6878      	ldr	r0, [r7, #4]
 800024c:	f7ff ff98 	bl	8000180 <subKeyProcess>
 8000250:	e00d      	b.n	800026e <getKeyInput+0xce>
      }
    }else{
       TimeOutForKeyPress --;
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput+0xfc>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3b01      	subs	r3, #1
 8000258:	4a10      	ldr	r2, [pc, #64]	; (800029c <getKeyInput+0xfc>)
 800025a:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 800025c:	4b0f      	ldr	r3, [pc, #60]	; (800029c <getKeyInput+0xfc>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	2b00      	cmp	r3, #0
 8000262:	d104      	bne.n	800026e <getKeyInput+0xce>
          KeyReg3[i] = NORMAL_STATE;
 8000264:	4a0c      	ldr	r2, [pc, #48]	; (8000298 <getKeyInput+0xf8>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2101      	movs	r1, #1
 800026a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
for(int i=0; i<BUTTONS_NUMBER; i++){
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3301      	adds	r3, #1
 8000272:	607b      	str	r3, [r7, #4]
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	2b02      	cmp	r3, #2
 8000278:	dd98      	ble.n	80001ac <getKeyInput+0xc>
        }
    }
  }
}
}
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	3708      	adds	r7, #8
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000018 	.word	0x20000018
 8000288:	20000024 	.word	0x20000024
 800028c:	2000000c 	.word	0x2000000c
 8000290:	20000000 	.word	0x20000000
 8000294:	40010800 	.word	0x40010800
 8000298:	20000030 	.word	0x20000030
 800029c:	2000003c 	.word	0x2000003c

080002a0 <displayFirstLedCouple>:
 *      Author: ad
 */
#include "display_led.h"


void displayFirstLedCouple(enum LedState state_1){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	71fb      	strb	r3, [r7, #7]
	switch(state_1){
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	2b03      	cmp	r3, #3
 80002ae:	d84b      	bhi.n	8000348 <displayFirstLedCouple+0xa8>
 80002b0:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <displayFirstLedCouple+0x18>)
 80002b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b6:	bf00      	nop
 80002b8:	080002c9 	.word	0x080002c9
 80002bc:	080002e9 	.word	0x080002e9
 80002c0:	08000329 	.word	0x08000329
 80002c4:	08000309 	.word	0x08000309
	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 80002c8:	2201      	movs	r2, #1
 80002ca:	2108      	movs	r1, #8
 80002cc:	4821      	ldr	r0, [pc, #132]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002ce:	f001 fe4a 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 80002d2:	2201      	movs	r2, #1
 80002d4:	2104      	movs	r1, #4
 80002d6:	481f      	ldr	r0, [pc, #124]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002d8:	f001 fe45 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 80002dc:	2201      	movs	r2, #1
 80002de:	2102      	movs	r1, #2
 80002e0:	481c      	ldr	r0, [pc, #112]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002e2:	f001 fe40 	bl	8001f66 <HAL_GPIO_WritePin>
			 break;
 80002e6:	e030      	b.n	800034a <displayFirstLedCouple+0xaa>
	 case RED:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 80002e8:	2201      	movs	r2, #1
 80002ea:	2108      	movs	r1, #8
 80002ec:	4819      	ldr	r0, [pc, #100]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002ee:	f001 fe3a 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 80002f2:	2201      	movs	r2, #1
 80002f4:	2104      	movs	r1, #4
 80002f6:	4817      	ldr	r0, [pc, #92]	; (8000354 <displayFirstLedCouple+0xb4>)
 80002f8:	f001 fe35 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 0 ) ;
 80002fc:	2200      	movs	r2, #0
 80002fe:	2102      	movs	r1, #2
 8000300:	4814      	ldr	r0, [pc, #80]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000302:	f001 fe30 	bl	8001f66 <HAL_GPIO_WritePin>
			 break;
 8000306:	e020      	b.n	800034a <displayFirstLedCouple+0xaa>
	 case YELLOW:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 1) ;
 8000308:	2201      	movs	r2, #1
 800030a:	2108      	movs	r1, #8
 800030c:	4811      	ldr	r0, [pc, #68]	; (8000354 <displayFirstLedCouple+0xb4>)
 800030e:	f001 fe2a 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 0 ) ;
 8000312:	2200      	movs	r2, #0
 8000314:	2104      	movs	r1, #4
 8000316:	480f      	ldr	r0, [pc, #60]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000318:	f001 fe25 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 800031c:	2201      	movs	r2, #1
 800031e:	2102      	movs	r1, #2
 8000320:	480c      	ldr	r0, [pc, #48]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000322:	f001 fe20 	bl	8001f66 <HAL_GPIO_WritePin>
			 break;
 8000326:	e010      	b.n	800034a <displayFirstLedCouple+0xaa>
	 case GREEN:
			 HAL_GPIO_WritePin( GREEN1_GPIO_Port , GREEN1_Pin , 0) ;
 8000328:	2200      	movs	r2, #0
 800032a:	2108      	movs	r1, #8
 800032c:	4809      	ldr	r0, [pc, #36]	; (8000354 <displayFirstLedCouple+0xb4>)
 800032e:	f001 fe1a 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW1_GPIO_Port , YELLOW1_Pin , 1 ) ;
 8000332:	2201      	movs	r2, #1
 8000334:	2104      	movs	r1, #4
 8000336:	4807      	ldr	r0, [pc, #28]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000338:	f001 fe15 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED1_GPIO_Port , RED1_Pin , 1 ) ;
 800033c:	2201      	movs	r2, #1
 800033e:	2102      	movs	r1, #2
 8000340:	4804      	ldr	r0, [pc, #16]	; (8000354 <displayFirstLedCouple+0xb4>)
 8000342:	f001 fe10 	bl	8001f66 <HAL_GPIO_WritePin>
			 break;
 8000346:	e000      	b.n	800034a <displayFirstLedCouple+0xaa>
	 default:
		 break;
 8000348:	bf00      	nop
	}
}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010800 	.word	0x40010800

08000358 <displaySecondLedCouple>:



void displaySecondLedCouple(enum LedState state_2){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
	switch(state_2){
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b03      	cmp	r3, #3
 8000366:	d84b      	bhi.n	8000400 <displaySecondLedCouple+0xa8>
 8000368:	a201      	add	r2, pc, #4	; (adr r2, 8000370 <displaySecondLedCouple+0x18>)
 800036a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800036e:	bf00      	nop
 8000370:	08000381 	.word	0x08000381
 8000374:	080003a1 	.word	0x080003a1
 8000378:	080003e1 	.word	0x080003e1
 800037c:	080003c1 	.word	0x080003c1
	 	 case LED_INIT:
			 HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 8000380:	2201      	movs	r2, #1
 8000382:	2140      	movs	r1, #64	; 0x40
 8000384:	4821      	ldr	r0, [pc, #132]	; (800040c <displaySecondLedCouple+0xb4>)
 8000386:	f001 fdee 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 800038a:	2201      	movs	r2, #1
 800038c:	2120      	movs	r1, #32
 800038e:	481f      	ldr	r0, [pc, #124]	; (800040c <displaySecondLedCouple+0xb4>)
 8000390:	f001 fde9 	bl	8001f66 <HAL_GPIO_WritePin>
			 HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 8000394:	2201      	movs	r2, #1
 8000396:	2110      	movs	r1, #16
 8000398:	481c      	ldr	r0, [pc, #112]	; (800040c <displaySecondLedCouple+0xb4>)
 800039a:	f001 fde4 	bl	8001f66 <HAL_GPIO_WritePin>
			 break;
 800039e:	e030      	b.n	8000402 <displaySecondLedCouple+0xaa>
		case RED:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 80003a0:	2201      	movs	r2, #1
 80003a2:	2140      	movs	r1, #64	; 0x40
 80003a4:	4819      	ldr	r0, [pc, #100]	; (800040c <displaySecondLedCouple+0xb4>)
 80003a6:	f001 fdde 	bl	8001f66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 80003aa:	2201      	movs	r2, #1
 80003ac:	2120      	movs	r1, #32
 80003ae:	4817      	ldr	r0, [pc, #92]	; (800040c <displaySecondLedCouple+0xb4>)
 80003b0:	f001 fdd9 	bl	8001f66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 0 ) ;
 80003b4:	2200      	movs	r2, #0
 80003b6:	2110      	movs	r1, #16
 80003b8:	4814      	ldr	r0, [pc, #80]	; (800040c <displaySecondLedCouple+0xb4>)
 80003ba:	f001 fdd4 	bl	8001f66 <HAL_GPIO_WritePin>
			break;
 80003be:	e020      	b.n	8000402 <displaySecondLedCouple+0xaa>
		case YELLOW:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 1) ;
 80003c0:	2201      	movs	r2, #1
 80003c2:	2140      	movs	r1, #64	; 0x40
 80003c4:	4811      	ldr	r0, [pc, #68]	; (800040c <displaySecondLedCouple+0xb4>)
 80003c6:	f001 fdce 	bl	8001f66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 0 ) ;
 80003ca:	2200      	movs	r2, #0
 80003cc:	2120      	movs	r1, #32
 80003ce:	480f      	ldr	r0, [pc, #60]	; (800040c <displaySecondLedCouple+0xb4>)
 80003d0:	f001 fdc9 	bl	8001f66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 80003d4:	2201      	movs	r2, #1
 80003d6:	2110      	movs	r1, #16
 80003d8:	480c      	ldr	r0, [pc, #48]	; (800040c <displaySecondLedCouple+0xb4>)
 80003da:	f001 fdc4 	bl	8001f66 <HAL_GPIO_WritePin>
			break;
 80003de:	e010      	b.n	8000402 <displaySecondLedCouple+0xaa>
		case GREEN:
			HAL_GPIO_WritePin( GREEN2_GPIO_Port , GREEN2_Pin , 0) ;
 80003e0:	2200      	movs	r2, #0
 80003e2:	2140      	movs	r1, #64	; 0x40
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <displaySecondLedCouple+0xb4>)
 80003e6:	f001 fdbe 	bl	8001f66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( YELLOW2_GPIO_Port , YELLOW2_Pin , 1 ) ;
 80003ea:	2201      	movs	r2, #1
 80003ec:	2120      	movs	r1, #32
 80003ee:	4807      	ldr	r0, [pc, #28]	; (800040c <displaySecondLedCouple+0xb4>)
 80003f0:	f001 fdb9 	bl	8001f66 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin( RED2_GPIO_Port , RED2_Pin , 1 ) ;
 80003f4:	2201      	movs	r2, #1
 80003f6:	2110      	movs	r1, #16
 80003f8:	4804      	ldr	r0, [pc, #16]	; (800040c <displaySecondLedCouple+0xb4>)
 80003fa:	f001 fdb4 	bl	8001f66 <HAL_GPIO_WritePin>
			break;
 80003fe:	e000      	b.n	8000402 <displaySecondLedCouple+0xaa>
		default:
		  break;
 8000400:	bf00      	nop
   }
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	40010800 	.word	0x40010800

08000410 <toggleLeds>:

void toggleLeds(enum LedState state){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	4603      	mov	r3, r0
 8000418:	71fb      	strb	r3, [r7, #7]
	switch(state){
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	2b03      	cmp	r3, #3
 800041e:	d00e      	beq.n	800043e <toggleLeds+0x2e>
 8000420:	2b03      	cmp	r3, #3
 8000422:	dc1e      	bgt.n	8000462 <toggleLeds+0x52>
 8000424:	2b01      	cmp	r3, #1
 8000426:	d013      	beq.n	8000450 <toggleLeds+0x40>
 8000428:	2b02      	cmp	r3, #2
 800042a:	d11a      	bne.n	8000462 <toggleLeds+0x52>
	 case GREEN:
			 HAL_GPIO_TogglePin( GREEN1_GPIO_Port , GREEN1_Pin) ;
 800042c:	2108      	movs	r1, #8
 800042e:	480f      	ldr	r0, [pc, #60]	; (800046c <toggleLeds+0x5c>)
 8000430:	f001 fdb1 	bl	8001f96 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( GREEN2_GPIO_Port , GREEN2_Pin) ;
 8000434:	2140      	movs	r1, #64	; 0x40
 8000436:	480d      	ldr	r0, [pc, #52]	; (800046c <toggleLeds+0x5c>)
 8000438:	f001 fdad 	bl	8001f96 <HAL_GPIO_TogglePin>
			 break;
 800043c:	e012      	b.n	8000464 <toggleLeds+0x54>
	 case YELLOW:
			 HAL_GPIO_TogglePin( YELLOW1_GPIO_Port , YELLOW1_Pin) ;
 800043e:	2104      	movs	r1, #4
 8000440:	480a      	ldr	r0, [pc, #40]	; (800046c <toggleLeds+0x5c>)
 8000442:	f001 fda8 	bl	8001f96 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( YELLOW2_GPIO_Port , YELLOW2_Pin) ;
 8000446:	2120      	movs	r1, #32
 8000448:	4808      	ldr	r0, [pc, #32]	; (800046c <toggleLeds+0x5c>)
 800044a:	f001 fda4 	bl	8001f96 <HAL_GPIO_TogglePin>
			 break;
 800044e:	e009      	b.n	8000464 <toggleLeds+0x54>
	 case RED:
			 HAL_GPIO_TogglePin( RED1_GPIO_Port , RED1_Pin) ;
 8000450:	2102      	movs	r1, #2
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <toggleLeds+0x5c>)
 8000454:	f001 fd9f 	bl	8001f96 <HAL_GPIO_TogglePin>
			 HAL_GPIO_TogglePin( RED2_GPIO_Port , RED2_Pin) ;
 8000458:	2110      	movs	r1, #16
 800045a:	4804      	ldr	r0, [pc, #16]	; (800046c <toggleLeds+0x5c>)
 800045c:	f001 fd9b 	bl	8001f96 <HAL_GPIO_TogglePin>
			 break;
 8000460:	e000      	b.n	8000464 <toggleLeds+0x54>
	 default:
		 break;
 8000462:	bf00      	nop
	}
}
 8000464:	bf00      	nop
 8000466:	3708      	adds	r7, #8
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	40010800 	.word	0x40010800

08000470 <displaySEG7_1>:


void displaySEG7_1(int num){
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  switch(num){
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b09      	cmp	r3, #9
 800047c:	f200 8180 	bhi.w	8000780 <displaySEG7_1+0x310>
 8000480:	a201      	add	r2, pc, #4	; (adr r2, 8000488 <displaySEG7_1+0x18>)
 8000482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000486:	bf00      	nop
 8000488:	080004b1 	.word	0x080004b1
 800048c:	080004f9 	.word	0x080004f9
 8000490:	08000541 	.word	0x08000541
 8000494:	08000589 	.word	0x08000589
 8000498:	080005d1 	.word	0x080005d1
 800049c:	08000619 	.word	0x08000619
 80004a0:	08000661 	.word	0x08000661
 80004a4:	080006a9 	.word	0x080006a9
 80004a8:	080006f1 	.word	0x080006f1
 80004ac:	08000739 	.word	0x08000739
    case 0:
          HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80004b0:	2200      	movs	r2, #0
 80004b2:	2101      	movs	r1, #1
 80004b4:	48b5      	ldr	r0, [pc, #724]	; (800078c <displaySEG7_1+0x31c>)
 80004b6:	f001 fd56 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80004ba:	2200      	movs	r2, #0
 80004bc:	2102      	movs	r1, #2
 80004be:	48b3      	ldr	r0, [pc, #716]	; (800078c <displaySEG7_1+0x31c>)
 80004c0:	f001 fd51 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80004c4:	2200      	movs	r2, #0
 80004c6:	2104      	movs	r1, #4
 80004c8:	48b0      	ldr	r0, [pc, #704]	; (800078c <displaySEG7_1+0x31c>)
 80004ca:	f001 fd4c 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80004ce:	2200      	movs	r2, #0
 80004d0:	2108      	movs	r1, #8
 80004d2:	48ae      	ldr	r0, [pc, #696]	; (800078c <displaySEG7_1+0x31c>)
 80004d4:	f001 fd47 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 80004d8:	2200      	movs	r2, #0
 80004da:	2110      	movs	r1, #16
 80004dc:	48ab      	ldr	r0, [pc, #684]	; (800078c <displaySEG7_1+0x31c>)
 80004de:	f001 fd42 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 80004e2:	2200      	movs	r2, #0
 80004e4:	2120      	movs	r1, #32
 80004e6:	48a9      	ldr	r0, [pc, #676]	; (800078c <displaySEG7_1+0x31c>)
 80004e8:	f001 fd3d 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80004ec:	2201      	movs	r2, #1
 80004ee:	2140      	movs	r1, #64	; 0x40
 80004f0:	48a6      	ldr	r0, [pc, #664]	; (800078c <displaySEG7_1+0x31c>)
 80004f2:	f001 fd38 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 80004f6:	e144      	b.n	8000782 <displaySEG7_1+0x312>

    case 1:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 80004f8:	2201      	movs	r2, #1
 80004fa:	2101      	movs	r1, #1
 80004fc:	48a3      	ldr	r0, [pc, #652]	; (800078c <displaySEG7_1+0x31c>)
 80004fe:	f001 fd32 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000502:	2200      	movs	r2, #0
 8000504:	2102      	movs	r1, #2
 8000506:	48a1      	ldr	r0, [pc, #644]	; (800078c <displaySEG7_1+0x31c>)
 8000508:	f001 fd2d 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800050c:	2200      	movs	r2, #0
 800050e:	2104      	movs	r1, #4
 8000510:	489e      	ldr	r0, [pc, #632]	; (800078c <displaySEG7_1+0x31c>)
 8000512:	f001 fd28 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 8000516:	2201      	movs	r2, #1
 8000518:	2108      	movs	r1, #8
 800051a:	489c      	ldr	r0, [pc, #624]	; (800078c <displaySEG7_1+0x31c>)
 800051c:	f001 fd23 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000520:	2201      	movs	r2, #1
 8000522:	2110      	movs	r1, #16
 8000524:	4899      	ldr	r0, [pc, #612]	; (800078c <displaySEG7_1+0x31c>)
 8000526:	f001 fd1e 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 800052a:	2201      	movs	r2, #1
 800052c:	2120      	movs	r1, #32
 800052e:	4897      	ldr	r0, [pc, #604]	; (800078c <displaySEG7_1+0x31c>)
 8000530:	f001 fd19 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 8000534:	2201      	movs	r2, #1
 8000536:	2140      	movs	r1, #64	; 0x40
 8000538:	4894      	ldr	r0, [pc, #592]	; (800078c <displaySEG7_1+0x31c>)
 800053a:	f001 fd14 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 800053e:	e120      	b.n	8000782 <displaySEG7_1+0x312>

    case 2:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000540:	2200      	movs	r2, #0
 8000542:	2101      	movs	r1, #1
 8000544:	4891      	ldr	r0, [pc, #580]	; (800078c <displaySEG7_1+0x31c>)
 8000546:	f001 fd0e 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 800054a:	2200      	movs	r2, #0
 800054c:	2102      	movs	r1, #2
 800054e:	488f      	ldr	r0, [pc, #572]	; (800078c <displaySEG7_1+0x31c>)
 8000550:	f001 fd09 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 1 ) ;
 8000554:	2201      	movs	r2, #1
 8000556:	2104      	movs	r1, #4
 8000558:	488c      	ldr	r0, [pc, #560]	; (800078c <displaySEG7_1+0x31c>)
 800055a:	f001 fd04 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800055e:	2200      	movs	r2, #0
 8000560:	2108      	movs	r1, #8
 8000562:	488a      	ldr	r0, [pc, #552]	; (800078c <displaySEG7_1+0x31c>)
 8000564:	f001 fcff 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000568:	2200      	movs	r2, #0
 800056a:	2110      	movs	r1, #16
 800056c:	4887      	ldr	r0, [pc, #540]	; (800078c <displaySEG7_1+0x31c>)
 800056e:	f001 fcfa 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 8000572:	2201      	movs	r2, #1
 8000574:	2120      	movs	r1, #32
 8000576:	4885      	ldr	r0, [pc, #532]	; (800078c <displaySEG7_1+0x31c>)
 8000578:	f001 fcf5 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800057c:	2200      	movs	r2, #0
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	4882      	ldr	r0, [pc, #520]	; (800078c <displaySEG7_1+0x31c>)
 8000582:	f001 fcf0 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 8000586:	e0fc      	b.n	8000782 <displaySEG7_1+0x312>

    case 3:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000588:	2200      	movs	r2, #0
 800058a:	2101      	movs	r1, #1
 800058c:	487f      	ldr	r0, [pc, #508]	; (800078c <displaySEG7_1+0x31c>)
 800058e:	f001 fcea 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000592:	2200      	movs	r2, #0
 8000594:	2102      	movs	r1, #2
 8000596:	487d      	ldr	r0, [pc, #500]	; (800078c <displaySEG7_1+0x31c>)
 8000598:	f001 fce5 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800059c:	2200      	movs	r2, #0
 800059e:	2104      	movs	r1, #4
 80005a0:	487a      	ldr	r0, [pc, #488]	; (800078c <displaySEG7_1+0x31c>)
 80005a2:	f001 fce0 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 80005a6:	2200      	movs	r2, #0
 80005a8:	2108      	movs	r1, #8
 80005aa:	4878      	ldr	r0, [pc, #480]	; (800078c <displaySEG7_1+0x31c>)
 80005ac:	f001 fcdb 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80005b0:	2201      	movs	r2, #1
 80005b2:	2110      	movs	r1, #16
 80005b4:	4875      	ldr	r0, [pc, #468]	; (800078c <displaySEG7_1+0x31c>)
 80005b6:	f001 fcd6 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80005ba:	2201      	movs	r2, #1
 80005bc:	2120      	movs	r1, #32
 80005be:	4873      	ldr	r0, [pc, #460]	; (800078c <displaySEG7_1+0x31c>)
 80005c0:	f001 fcd1 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 80005c4:	2200      	movs	r2, #0
 80005c6:	2140      	movs	r1, #64	; 0x40
 80005c8:	4870      	ldr	r0, [pc, #448]	; (800078c <displaySEG7_1+0x31c>)
 80005ca:	f001 fccc 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 80005ce:	e0d8      	b.n	8000782 <displaySEG7_1+0x312>

    case 4:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 1 ) ;
 80005d0:	2201      	movs	r2, #1
 80005d2:	2101      	movs	r1, #1
 80005d4:	486d      	ldr	r0, [pc, #436]	; (800078c <displaySEG7_1+0x31c>)
 80005d6:	f001 fcc6 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80005da:	2200      	movs	r2, #0
 80005dc:	2102      	movs	r1, #2
 80005de:	486b      	ldr	r0, [pc, #428]	; (800078c <displaySEG7_1+0x31c>)
 80005e0:	f001 fcc1 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80005e4:	2200      	movs	r2, #0
 80005e6:	2104      	movs	r1, #4
 80005e8:	4868      	ldr	r0, [pc, #416]	; (800078c <displaySEG7_1+0x31c>)
 80005ea:	f001 fcbc 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 80005ee:	2201      	movs	r2, #1
 80005f0:	2108      	movs	r1, #8
 80005f2:	4866      	ldr	r0, [pc, #408]	; (800078c <displaySEG7_1+0x31c>)
 80005f4:	f001 fcb7 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80005f8:	2201      	movs	r2, #1
 80005fa:	2110      	movs	r1, #16
 80005fc:	4863      	ldr	r0, [pc, #396]	; (800078c <displaySEG7_1+0x31c>)
 80005fe:	f001 fcb2 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000602:	2200      	movs	r2, #0
 8000604:	2120      	movs	r1, #32
 8000606:	4861      	ldr	r0, [pc, #388]	; (800078c <displaySEG7_1+0x31c>)
 8000608:	f001 fcad 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800060c:	2200      	movs	r2, #0
 800060e:	2140      	movs	r1, #64	; 0x40
 8000610:	485e      	ldr	r0, [pc, #376]	; (800078c <displaySEG7_1+0x31c>)
 8000612:	f001 fca8 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 8000616:	e0b4      	b.n	8000782 <displaySEG7_1+0x312>
    case 5:
        HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000618:	2200      	movs	r2, #0
 800061a:	2101      	movs	r1, #1
 800061c:	485b      	ldr	r0, [pc, #364]	; (800078c <displaySEG7_1+0x31c>)
 800061e:	f001 fca2 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 8000622:	2201      	movs	r2, #1
 8000624:	2102      	movs	r1, #2
 8000626:	4859      	ldr	r0, [pc, #356]	; (800078c <displaySEG7_1+0x31c>)
 8000628:	f001 fc9d 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800062c:	2200      	movs	r2, #0
 800062e:	2104      	movs	r1, #4
 8000630:	4856      	ldr	r0, [pc, #344]	; (800078c <displaySEG7_1+0x31c>)
 8000632:	f001 fc98 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000636:	2200      	movs	r2, #0
 8000638:	2108      	movs	r1, #8
 800063a:	4854      	ldr	r0, [pc, #336]	; (800078c <displaySEG7_1+0x31c>)
 800063c:	f001 fc93 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000640:	2201      	movs	r2, #1
 8000642:	2110      	movs	r1, #16
 8000644:	4851      	ldr	r0, [pc, #324]	; (800078c <displaySEG7_1+0x31c>)
 8000646:	f001 fc8e 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	484f      	ldr	r0, [pc, #316]	; (800078c <displaySEG7_1+0x31c>)
 8000650:	f001 fc89 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000654:	2200      	movs	r2, #0
 8000656:	2140      	movs	r1, #64	; 0x40
 8000658:	484c      	ldr	r0, [pc, #304]	; (800078c <displaySEG7_1+0x31c>)
 800065a:	f001 fc84 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 800065e:	e090      	b.n	8000782 <displaySEG7_1+0x312>
    case 6:
	    HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000660:	2200      	movs	r2, #0
 8000662:	2101      	movs	r1, #1
 8000664:	4849      	ldr	r0, [pc, #292]	; (800078c <displaySEG7_1+0x31c>)
 8000666:	f001 fc7e 	bl	8001f66 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 1 ) ;
 800066a:	2201      	movs	r2, #1
 800066c:	2102      	movs	r1, #2
 800066e:	4847      	ldr	r0, [pc, #284]	; (800078c <displaySEG7_1+0x31c>)
 8000670:	f001 fc79 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000674:	2200      	movs	r2, #0
 8000676:	2104      	movs	r1, #4
 8000678:	4844      	ldr	r0, [pc, #272]	; (800078c <displaySEG7_1+0x31c>)
 800067a:	f001 fc74 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800067e:	2200      	movs	r2, #0
 8000680:	2108      	movs	r1, #8
 8000682:	4842      	ldr	r0, [pc, #264]	; (800078c <displaySEG7_1+0x31c>)
 8000684:	f001 fc6f 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000688:	2200      	movs	r2, #0
 800068a:	2110      	movs	r1, #16
 800068c:	483f      	ldr	r0, [pc, #252]	; (800078c <displaySEG7_1+0x31c>)
 800068e:	f001 fc6a 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000692:	2200      	movs	r2, #0
 8000694:	2120      	movs	r1, #32
 8000696:	483d      	ldr	r0, [pc, #244]	; (800078c <displaySEG7_1+0x31c>)
 8000698:	f001 fc65 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800069c:	2200      	movs	r2, #0
 800069e:	2140      	movs	r1, #64	; 0x40
 80006a0:	483a      	ldr	r0, [pc, #232]	; (800078c <displaySEG7_1+0x31c>)
 80006a2:	f001 fc60 	bl	8001f66 <HAL_GPIO_WritePin>
	  break;
 80006a6:	e06c      	b.n	8000782 <displaySEG7_1+0x312>
    case 7:
		  HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80006a8:	2200      	movs	r2, #0
 80006aa:	2101      	movs	r1, #1
 80006ac:	4837      	ldr	r0, [pc, #220]	; (800078c <displaySEG7_1+0x31c>)
 80006ae:	f001 fc5a 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80006b2:	2200      	movs	r2, #0
 80006b4:	2102      	movs	r1, #2
 80006b6:	4835      	ldr	r0, [pc, #212]	; (800078c <displaySEG7_1+0x31c>)
 80006b8:	f001 fc55 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 80006bc:	2200      	movs	r2, #0
 80006be:	2104      	movs	r1, #4
 80006c0:	4832      	ldr	r0, [pc, #200]	; (800078c <displaySEG7_1+0x31c>)
 80006c2:	f001 fc50 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 1 ) ;
 80006c6:	2201      	movs	r2, #1
 80006c8:	2108      	movs	r1, #8
 80006ca:	4830      	ldr	r0, [pc, #192]	; (800078c <displaySEG7_1+0x31c>)
 80006cc:	f001 fc4b 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 80006d0:	2201      	movs	r2, #1
 80006d2:	2110      	movs	r1, #16
 80006d4:	482d      	ldr	r0, [pc, #180]	; (800078c <displaySEG7_1+0x31c>)
 80006d6:	f001 fc46 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 1 ) ;
 80006da:	2201      	movs	r2, #1
 80006dc:	2120      	movs	r1, #32
 80006de:	482b      	ldr	r0, [pc, #172]	; (800078c <displaySEG7_1+0x31c>)
 80006e0:	f001 fc41 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 1 ) ;
 80006e4:	2201      	movs	r2, #1
 80006e6:	2140      	movs	r1, #64	; 0x40
 80006e8:	4828      	ldr	r0, [pc, #160]	; (800078c <displaySEG7_1+0x31c>)
 80006ea:	f001 fc3c 	bl	8001f66 <HAL_GPIO_WritePin>
		  break;
 80006ee:	e048      	b.n	8000782 <displaySEG7_1+0x312>
    case 8:
		  HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 80006f0:	2200      	movs	r2, #0
 80006f2:	2101      	movs	r1, #1
 80006f4:	4825      	ldr	r0, [pc, #148]	; (800078c <displaySEG7_1+0x31c>)
 80006f6:	f001 fc36 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	4823      	ldr	r0, [pc, #140]	; (800078c <displaySEG7_1+0x31c>)
 8000700:	f001 fc31 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 8000704:	2200      	movs	r2, #0
 8000706:	2104      	movs	r1, #4
 8000708:	4820      	ldr	r0, [pc, #128]	; (800078c <displaySEG7_1+0x31c>)
 800070a:	f001 fc2c 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 800070e:	2200      	movs	r2, #0
 8000710:	2108      	movs	r1, #8
 8000712:	481e      	ldr	r0, [pc, #120]	; (800078c <displaySEG7_1+0x31c>)
 8000714:	f001 fc27 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 0 ) ;
 8000718:	2200      	movs	r2, #0
 800071a:	2110      	movs	r1, #16
 800071c:	481b      	ldr	r0, [pc, #108]	; (800078c <displaySEG7_1+0x31c>)
 800071e:	f001 fc22 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 8000722:	2200      	movs	r2, #0
 8000724:	2120      	movs	r1, #32
 8000726:	4819      	ldr	r0, [pc, #100]	; (800078c <displaySEG7_1+0x31c>)
 8000728:	f001 fc1d 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 800072c:	2200      	movs	r2, #0
 800072e:	2140      	movs	r1, #64	; 0x40
 8000730:	4816      	ldr	r0, [pc, #88]	; (800078c <displaySEG7_1+0x31c>)
 8000732:	f001 fc18 	bl	8001f66 <HAL_GPIO_WritePin>
		  break;
 8000736:	e024      	b.n	8000782 <displaySEG7_1+0x312>
    case 9:
		  HAL_GPIO_WritePin ( A1_GPIO_Port , A1_Pin , 0 ) ;
 8000738:	2200      	movs	r2, #0
 800073a:	2101      	movs	r1, #1
 800073c:	4813      	ldr	r0, [pc, #76]	; (800078c <displaySEG7_1+0x31c>)
 800073e:	f001 fc12 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B1_GPIO_Port , B1_Pin , 0 ) ;
 8000742:	2200      	movs	r2, #0
 8000744:	2102      	movs	r1, #2
 8000746:	4811      	ldr	r0, [pc, #68]	; (800078c <displaySEG7_1+0x31c>)
 8000748:	f001 fc0d 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C1_GPIO_Port , C1_Pin , 0 ) ;
 800074c:	2200      	movs	r2, #0
 800074e:	2104      	movs	r1, #4
 8000750:	480e      	ldr	r0, [pc, #56]	; (800078c <displaySEG7_1+0x31c>)
 8000752:	f001 fc08 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D1_GPIO_Port , D1_Pin , 0 ) ;
 8000756:	2200      	movs	r2, #0
 8000758:	2108      	movs	r1, #8
 800075a:	480c      	ldr	r0, [pc, #48]	; (800078c <displaySEG7_1+0x31c>)
 800075c:	f001 fc03 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E1_GPIO_Port , E1_Pin , 1 ) ;
 8000760:	2201      	movs	r2, #1
 8000762:	2110      	movs	r1, #16
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <displaySEG7_1+0x31c>)
 8000766:	f001 fbfe 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F1_GPIO_Port , F1_Pin , 0 ) ;
 800076a:	2200      	movs	r2, #0
 800076c:	2120      	movs	r1, #32
 800076e:	4807      	ldr	r0, [pc, #28]	; (800078c <displaySEG7_1+0x31c>)
 8000770:	f001 fbf9 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G1_GPIO_Port , G1_Pin , 0 ) ;
 8000774:	2200      	movs	r2, #0
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	4804      	ldr	r0, [pc, #16]	; (800078c <displaySEG7_1+0x31c>)
 800077a:	f001 fbf4 	bl	8001f66 <HAL_GPIO_WritePin>
		  break;
 800077e:	e000      	b.n	8000782 <displaySEG7_1+0x312>

    default:
      break;
 8000780:	bf00      	nop
  }
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010c00 	.word	0x40010c00

08000790 <displaySEG7_2>:


void displaySEG7_2(int num){
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  switch(num){
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b09      	cmp	r3, #9
 800079c:	f200 81bc 	bhi.w	8000b18 <displaySEG7_2+0x388>
 80007a0:	a201      	add	r2, pc, #4	; (adr r2, 80007a8 <displaySEG7_2+0x18>)
 80007a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a6:	bf00      	nop
 80007a8:	080007d1 	.word	0x080007d1
 80007ac:	08000825 	.word	0x08000825
 80007b0:	08000879 	.word	0x08000879
 80007b4:	080008cd 	.word	0x080008cd
 80007b8:	08000921 	.word	0x08000921
 80007bc:	08000975 	.word	0x08000975
 80007c0:	080009c9 	.word	0x080009c9
 80007c4:	08000a1d 	.word	0x08000a1d
 80007c8:	08000a71 	.word	0x08000a71
 80007cc:	08000ac5 	.word	0x08000ac5
    case 0:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 80007d0:	2200      	movs	r2, #0
 80007d2:	2180      	movs	r1, #128	; 0x80
 80007d4:	48d3      	ldr	r0, [pc, #844]	; (8000b24 <displaySEG7_2+0x394>)
 80007d6:	f001 fbc6 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007e0:	48d0      	ldr	r0, [pc, #832]	; (8000b24 <displaySEG7_2+0x394>)
 80007e2:	f001 fbc0 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	48cd      	ldr	r0, [pc, #820]	; (8000b24 <displaySEG7_2+0x394>)
 80007ee:	f001 fbba 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f8:	48ca      	ldr	r0, [pc, #808]	; (8000b24 <displaySEG7_2+0x394>)
 80007fa:	f001 fbb4 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 80007fe:	2200      	movs	r2, #0
 8000800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000804:	48c7      	ldr	r0, [pc, #796]	; (8000b24 <displaySEG7_2+0x394>)
 8000806:	f001 fbae 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 800080a:	2200      	movs	r2, #0
 800080c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000810:	48c4      	ldr	r0, [pc, #784]	; (8000b24 <displaySEG7_2+0x394>)
 8000812:	f001 fba8 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000816:	2201      	movs	r2, #1
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	48c1      	ldr	r0, [pc, #772]	; (8000b24 <displaySEG7_2+0x394>)
 800081e:	f001 fba2 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 8000822:	e17a      	b.n	8000b1a <displaySEG7_2+0x38a>

    case 1:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000824:	2201      	movs	r2, #1
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	48be      	ldr	r0, [pc, #760]	; (8000b24 <displaySEG7_2+0x394>)
 800082a:	f001 fb9c 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000834:	48bb      	ldr	r0, [pc, #748]	; (8000b24 <displaySEG7_2+0x394>)
 8000836:	f001 fb96 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000840:	48b8      	ldr	r0, [pc, #736]	; (8000b24 <displaySEG7_2+0x394>)
 8000842:	f001 fb90 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000846:	2201      	movs	r2, #1
 8000848:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800084c:	48b5      	ldr	r0, [pc, #724]	; (8000b24 <displaySEG7_2+0x394>)
 800084e:	f001 fb8a 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000852:	2201      	movs	r2, #1
 8000854:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000858:	48b2      	ldr	r0, [pc, #712]	; (8000b24 <displaySEG7_2+0x394>)
 800085a:	f001 fb84 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 800085e:	2201      	movs	r2, #1
 8000860:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000864:	48af      	ldr	r0, [pc, #700]	; (8000b24 <displaySEG7_2+0x394>)
 8000866:	f001 fb7e 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 800086a:	2201      	movs	r2, #1
 800086c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000870:	48ac      	ldr	r0, [pc, #688]	; (8000b24 <displaySEG7_2+0x394>)
 8000872:	f001 fb78 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 8000876:	e150      	b.n	8000b1a <displaySEG7_2+0x38a>

    case 2:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000878:	2200      	movs	r2, #0
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	48a9      	ldr	r0, [pc, #676]	; (8000b24 <displaySEG7_2+0x394>)
 800087e:	f001 fb72 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000882:	2200      	movs	r2, #0
 8000884:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000888:	48a6      	ldr	r0, [pc, #664]	; (8000b24 <displaySEG7_2+0x394>)
 800088a:	f001 fb6c 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 1 ) ;
 800088e:	2201      	movs	r2, #1
 8000890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000894:	48a3      	ldr	r0, [pc, #652]	; (8000b24 <displaySEG7_2+0x394>)
 8000896:	f001 fb66 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 800089a:	2200      	movs	r2, #0
 800089c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008a0:	48a0      	ldr	r0, [pc, #640]	; (8000b24 <displaySEG7_2+0x394>)
 80008a2:	f001 fb60 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008ac:	489d      	ldr	r0, [pc, #628]	; (8000b24 <displaySEG7_2+0x394>)
 80008ae:	f001 fb5a 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b8:	489a      	ldr	r0, [pc, #616]	; (8000b24 <displaySEG7_2+0x394>)
 80008ba:	f001 fb54 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 80008be:	2200      	movs	r2, #0
 80008c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c4:	4897      	ldr	r0, [pc, #604]	; (8000b24 <displaySEG7_2+0x394>)
 80008c6:	f001 fb4e 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 80008ca:	e126      	b.n	8000b1a <displaySEG7_2+0x38a>

    case 3:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 80008cc:	2200      	movs	r2, #0
 80008ce:	2180      	movs	r1, #128	; 0x80
 80008d0:	4894      	ldr	r0, [pc, #592]	; (8000b24 <displaySEG7_2+0x394>)
 80008d2:	f001 fb48 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 80008d6:	2200      	movs	r2, #0
 80008d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008dc:	4891      	ldr	r0, [pc, #580]	; (8000b24 <displaySEG7_2+0x394>)
 80008de:	f001 fb42 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e8:	488e      	ldr	r0, [pc, #568]	; (8000b24 <displaySEG7_2+0x394>)
 80008ea:	f001 fb3c 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f4:	488b      	ldr	r0, [pc, #556]	; (8000b24 <displaySEG7_2+0x394>)
 80008f6:	f001 fb36 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000900:	4888      	ldr	r0, [pc, #544]	; (8000b24 <displaySEG7_2+0x394>)
 8000902:	f001 fb30 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000906:	2201      	movs	r2, #1
 8000908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090c:	4885      	ldr	r0, [pc, #532]	; (8000b24 <displaySEG7_2+0x394>)
 800090e:	f001 fb2a 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000912:	2200      	movs	r2, #0
 8000914:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000918:	4882      	ldr	r0, [pc, #520]	; (8000b24 <displaySEG7_2+0x394>)
 800091a:	f001 fb24 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 800091e:	e0fc      	b.n	8000b1a <displaySEG7_2+0x38a>

    case 4:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 1 ) ;
 8000920:	2201      	movs	r2, #1
 8000922:	2180      	movs	r1, #128	; 0x80
 8000924:	487f      	ldr	r0, [pc, #508]	; (8000b24 <displaySEG7_2+0x394>)
 8000926:	f001 fb1e 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 800092a:	2200      	movs	r2, #0
 800092c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000930:	487c      	ldr	r0, [pc, #496]	; (8000b24 <displaySEG7_2+0x394>)
 8000932:	f001 fb18 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000936:	2200      	movs	r2, #0
 8000938:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093c:	4879      	ldr	r0, [pc, #484]	; (8000b24 <displaySEG7_2+0x394>)
 800093e:	f001 fb12 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000942:	2201      	movs	r2, #1
 8000944:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000948:	4876      	ldr	r0, [pc, #472]	; (8000b24 <displaySEG7_2+0x394>)
 800094a:	f001 fb0c 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 800094e:	2201      	movs	r2, #1
 8000950:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000954:	4873      	ldr	r0, [pc, #460]	; (8000b24 <displaySEG7_2+0x394>)
 8000956:	f001 fb06 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 800095a:	2200      	movs	r2, #0
 800095c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000960:	4870      	ldr	r0, [pc, #448]	; (8000b24 <displaySEG7_2+0x394>)
 8000962:	f001 fb00 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000966:	2200      	movs	r2, #0
 8000968:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096c:	486d      	ldr	r0, [pc, #436]	; (8000b24 <displaySEG7_2+0x394>)
 800096e:	f001 fafa 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 8000972:	e0d2      	b.n	8000b1a <displaySEG7_2+0x38a>
    case 5:
        HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000974:	2200      	movs	r2, #0
 8000976:	2180      	movs	r1, #128	; 0x80
 8000978:	486a      	ldr	r0, [pc, #424]	; (8000b24 <displaySEG7_2+0x394>)
 800097a:	f001 faf4 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 800097e:	2201      	movs	r2, #1
 8000980:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000984:	4867      	ldr	r0, [pc, #412]	; (8000b24 <displaySEG7_2+0x394>)
 8000986:	f001 faee 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 800098a:	2200      	movs	r2, #0
 800098c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000990:	4864      	ldr	r0, [pc, #400]	; (8000b24 <displaySEG7_2+0x394>)
 8000992:	f001 fae8 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000996:	2200      	movs	r2, #0
 8000998:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800099c:	4861      	ldr	r0, [pc, #388]	; (8000b24 <displaySEG7_2+0x394>)
 800099e:	f001 fae2 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 80009a2:	2201      	movs	r2, #1
 80009a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009a8:	485e      	ldr	r0, [pc, #376]	; (8000b24 <displaySEG7_2+0x394>)
 80009aa:	f001 fadc 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009b4:	485b      	ldr	r0, [pc, #364]	; (8000b24 <displaySEG7_2+0x394>)
 80009b6:	f001 fad6 	bl	8001f66 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 80009ba:	2200      	movs	r2, #0
 80009bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c0:	4858      	ldr	r0, [pc, #352]	; (8000b24 <displaySEG7_2+0x394>)
 80009c2:	f001 fad0 	bl	8001f66 <HAL_GPIO_WritePin>
        break;
 80009c6:	e0a8      	b.n	8000b1a <displaySEG7_2+0x38a>
    case 6:
	    HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	; 0x80
 80009cc:	4855      	ldr	r0, [pc, #340]	; (8000b24 <displaySEG7_2+0x394>)
 80009ce:	f001 faca 	bl	8001f66 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 1 ) ;
 80009d2:	2201      	movs	r2, #1
 80009d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009d8:	4852      	ldr	r0, [pc, #328]	; (8000b24 <displaySEG7_2+0x394>)
 80009da:	f001 fac4 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009e4:	484f      	ldr	r0, [pc, #316]	; (8000b24 <displaySEG7_2+0x394>)
 80009e6:	f001 fabe 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009f0:	484c      	ldr	r0, [pc, #304]	; (8000b24 <displaySEG7_2+0x394>)
 80009f2:	f001 fab8 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 80009f6:	2200      	movs	r2, #0
 80009f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009fc:	4849      	ldr	r0, [pc, #292]	; (8000b24 <displaySEG7_2+0x394>)
 80009fe:	f001 fab2 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a08:	4846      	ldr	r0, [pc, #280]	; (8000b24 <displaySEG7_2+0x394>)
 8000a0a:	f001 faac 	bl	8001f66 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a14:	4843      	ldr	r0, [pc, #268]	; (8000b24 <displaySEG7_2+0x394>)
 8000a16:	f001 faa6 	bl	8001f66 <HAL_GPIO_WritePin>
	  break;
 8000a1a:	e07e      	b.n	8000b1a <displaySEG7_2+0x38a>
    case 7:
		  HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	2180      	movs	r1, #128	; 0x80
 8000a20:	4840      	ldr	r0, [pc, #256]	; (8000b24 <displaySEG7_2+0x394>)
 8000a22:	f001 faa0 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a2c:	483d      	ldr	r0, [pc, #244]	; (8000b24 <displaySEG7_2+0x394>)
 8000a2e:	f001 fa9a 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a38:	483a      	ldr	r0, [pc, #232]	; (8000b24 <displaySEG7_2+0x394>)
 8000a3a:	f001 fa94 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 1 ) ;
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a44:	4837      	ldr	r0, [pc, #220]	; (8000b24 <displaySEG7_2+0x394>)
 8000a46:	f001 fa8e 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a50:	4834      	ldr	r0, [pc, #208]	; (8000b24 <displaySEG7_2+0x394>)
 8000a52:	f001 fa88 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 1 ) ;
 8000a56:	2201      	movs	r2, #1
 8000a58:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a5c:	4831      	ldr	r0, [pc, #196]	; (8000b24 <displaySEG7_2+0x394>)
 8000a5e:	f001 fa82 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 1 ) ;
 8000a62:	2201      	movs	r2, #1
 8000a64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a68:	482e      	ldr	r0, [pc, #184]	; (8000b24 <displaySEG7_2+0x394>)
 8000a6a:	f001 fa7c 	bl	8001f66 <HAL_GPIO_WritePin>
		  break;
 8000a6e:	e054      	b.n	8000b1a <displaySEG7_2+0x38a>
    case 8:
		  HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000a70:	2200      	movs	r2, #0
 8000a72:	2180      	movs	r1, #128	; 0x80
 8000a74:	482b      	ldr	r0, [pc, #172]	; (8000b24 <displaySEG7_2+0x394>)
 8000a76:	f001 fa76 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a80:	4828      	ldr	r0, [pc, #160]	; (8000b24 <displaySEG7_2+0x394>)
 8000a82:	f001 fa70 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000a86:	2200      	movs	r2, #0
 8000a88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8c:	4825      	ldr	r0, [pc, #148]	; (8000b24 <displaySEG7_2+0x394>)
 8000a8e:	f001 fa6a 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000a92:	2200      	movs	r2, #0
 8000a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a98:	4822      	ldr	r0, [pc, #136]	; (8000b24 <displaySEG7_2+0x394>)
 8000a9a:	f001 fa64 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 0 ) ;
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000aa4:	481f      	ldr	r0, [pc, #124]	; (8000b24 <displaySEG7_2+0x394>)
 8000aa6:	f001 fa5e 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ab0:	481c      	ldr	r0, [pc, #112]	; (8000b24 <displaySEG7_2+0x394>)
 8000ab2:	f001 fa58 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000abc:	4819      	ldr	r0, [pc, #100]	; (8000b24 <displaySEG7_2+0x394>)
 8000abe:	f001 fa52 	bl	8001f66 <HAL_GPIO_WritePin>
		  break;
 8000ac2:	e02a      	b.n	8000b1a <displaySEG7_2+0x38a>
    case 9:
		  HAL_GPIO_WritePin ( A2_GPIO_Port , A2_Pin , 0 ) ;
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2180      	movs	r1, #128	; 0x80
 8000ac8:	4816      	ldr	r0, [pc, #88]	; (8000b24 <displaySEG7_2+0x394>)
 8000aca:	f001 fa4c 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( B2_GPIO_Port , B2_Pin , 0 ) ;
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ad4:	4813      	ldr	r0, [pc, #76]	; (8000b24 <displaySEG7_2+0x394>)
 8000ad6:	f001 fa46 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( C2_GPIO_Port , C2_Pin , 0 ) ;
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ae0:	4810      	ldr	r0, [pc, #64]	; (8000b24 <displaySEG7_2+0x394>)
 8000ae2:	f001 fa40 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( D2_GPIO_Port , D2_Pin , 0 ) ;
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000aec:	480d      	ldr	r0, [pc, #52]	; (8000b24 <displaySEG7_2+0x394>)
 8000aee:	f001 fa3a 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( E2_GPIO_Port , E2_Pin , 1 ) ;
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000af8:	480a      	ldr	r0, [pc, #40]	; (8000b24 <displaySEG7_2+0x394>)
 8000afa:	f001 fa34 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( F2_GPIO_Port , F2_Pin , 0 ) ;
 8000afe:	2200      	movs	r2, #0
 8000b00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b04:	4807      	ldr	r0, [pc, #28]	; (8000b24 <displaySEG7_2+0x394>)
 8000b06:	f001 fa2e 	bl	8001f66 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin ( G2_GPIO_Port , G2_Pin , 0 ) ;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b10:	4804      	ldr	r0, [pc, #16]	; (8000b24 <displaySEG7_2+0x394>)
 8000b12:	f001 fa28 	bl	8001f66 <HAL_GPIO_WritePin>
		  break;
 8000b16:	e000      	b.n	8000b1a <displaySEG7_2+0x38a>

    default:
      break;
 8000b18:	bf00      	nop
  }
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40010c00 	.word	0x40010c00

08000b28 <enable0>:
void enable0(){
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2180      	movs	r1, #128	; 0x80
 8000b30:	4805      	ldr	r0, [pc, #20]	; (8000b48 <enable0+0x20>)
 8000b32:	f001 fa18 	bl	8001f66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <enable0+0x20>)
 8000b3e:	f001 fa12 	bl	8001f66 <HAL_GPIO_WritePin>
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40010800 	.word	0x40010800

08000b4c <enable1>:

void enable1(){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 8000b50:	2201      	movs	r2, #1
 8000b52:	2180      	movs	r1, #128	; 0x80
 8000b54:	4805      	ldr	r0, [pc, #20]	; (8000b6c <enable1+0x20>)
 8000b56:	f001 fa06 	bl	8001f66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <enable1+0x20>)
 8000b62:	f001 fa00 	bl	8001f66 <HAL_GPIO_WritePin>
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40010800 	.word	0x40010800

08000b70 <enable2>:

void enable2(){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <enable2+0x20>)
 8000b7c:	f001 f9f3 	bl	8001f66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b80:	2201      	movs	r2, #1
 8000b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b86:	4802      	ldr	r0, [pc, #8]	; (8000b90 <enable2+0x20>)
 8000b88:	f001 f9ed 	bl	8001f66 <HAL_GPIO_WritePin>
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	40010800 	.word	0x40010800

08000b94 <enable3>:

void enable3(){
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000b98:	2201      	movs	r2, #1
 8000b9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <enable3+0x20>)
 8000ba0:	f001 f9e1 	bl	8001f66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000baa:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <enable3+0x20>)
 8000bac:	f001 f9db 	bl	8001f66 <HAL_GPIO_WritePin>
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40010800 	.word	0x40010800

08000bb8 <enable4>:
void enable4(){
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc2:	4805      	ldr	r0, [pc, #20]	; (8000bd8 <enable4+0x20>)
 8000bc4:	f001 f9cf 	bl	8001f66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bce:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <enable4+0x20>)
 8000bd0:	f001 f9c9 	bl	8001f66 <HAL_GPIO_WritePin>
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40010800 	.word	0x40010800

08000bdc <enable5>:

void enable5(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <enable5+0x20>)
 8000be8:	f001 f9bd 	bl	8001f66 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN5_GPIO_Port, EN5_Pin, RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bf2:	4802      	ldr	r0, [pc, #8]	; (8000bfc <enable5+0x20>)
 8000bf4:	f001 f9b7 	bl	8001f66 <HAL_GPIO_WritePin>
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40010800 	.word	0x40010800

08000c00 <showTimeDelay_First>:
void showTimeDelay_First(int first, int second){
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	enable0();
 8000c0a:	f7ff ff8d 	bl	8000b28 <enable0>
	displaySEG7_1(first/10);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a0c      	ldr	r2, [pc, #48]	; (8000c44 <showTimeDelay_First+0x44>)
 8000c12:	fb82 1203 	smull	r1, r2, r2, r3
 8000c16:	1092      	asrs	r2, r2, #2
 8000c18:	17db      	asrs	r3, r3, #31
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fc27 	bl	8000470 <displaySEG7_1>
	enable2();
 8000c22:	f7ff ffa5 	bl	8000b70 <enable2>
	displaySEG7_2(second/10);
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <showTimeDelay_First+0x44>)
 8000c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c2e:	1092      	asrs	r2, r2, #2
 8000c30:	17db      	asrs	r3, r3, #31
 8000c32:	1ad3      	subs	r3, r2, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff fdab 	bl	8000790 <displaySEG7_2>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	66666667 	.word	0x66666667

08000c48 <showTimeDelay_Second>:

void showTimeDelay_Second(int first, int second){
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	enable1();
 8000c52:	f7ff ff7b 	bl	8000b4c <enable1>
	displaySEG7_1(first%10);
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <showTimeDelay_Second+0x58>)
 8000c5a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c5e:	1099      	asrs	r1, r3, #2
 8000c60:	17d3      	asrs	r3, r2, #31
 8000c62:	1ac9      	subs	r1, r1, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	440b      	add	r3, r1
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	1ad1      	subs	r1, r2, r3
 8000c6e:	4608      	mov	r0, r1
 8000c70:	f7ff fbfe 	bl	8000470 <displaySEG7_1>
	enable3();
 8000c74:	f7ff ff8e 	bl	8000b94 <enable3>
	displaySEG7_2(second%10);
 8000c78:	683a      	ldr	r2, [r7, #0]
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <showTimeDelay_Second+0x58>)
 8000c7c:	fb83 1302 	smull	r1, r3, r3, r2
 8000c80:	1099      	asrs	r1, r3, #2
 8000c82:	17d3      	asrs	r3, r2, #31
 8000c84:	1ac9      	subs	r1, r1, r3
 8000c86:	460b      	mov	r3, r1
 8000c88:	009b      	lsls	r3, r3, #2
 8000c8a:	440b      	add	r3, r1
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	1ad1      	subs	r1, r2, r3
 8000c90:	4608      	mov	r0, r1
 8000c92:	f7ff fd7d 	bl	8000790 <displaySEG7_2>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	66666667 	.word	0x66666667

08000ca4 <showTimeDelay1>:
void showTimeDelay1(int delaytime){
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	enable4();
 8000cac:	f7ff ff84 	bl	8000bb8 <enable4>
	displaySEG7_1(delaytime/10);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <showTimeDelay1+0x28>)
 8000cb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb8:	1092      	asrs	r2, r2, #2
 8000cba:	17db      	asrs	r3, r3, #31
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fbd6 	bl	8000470 <displaySEG7_1>
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	66666667 	.word	0x66666667

08000cd0 <showTimeDelay2>:
void showTimeDelay2(int delaytime){
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	enable5();
 8000cd8:	f7ff ff80 	bl	8000bdc <enable5>
	displaySEG7_2(delaytime%10);
 8000cdc:	687a      	ldr	r2, [r7, #4]
 8000cde:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <showTimeDelay2+0x34>)
 8000ce0:	fb83 1302 	smull	r1, r3, r3, r2
 8000ce4:	1099      	asrs	r1, r3, #2
 8000ce6:	17d3      	asrs	r3, r2, #31
 8000ce8:	1ac9      	subs	r1, r1, r3
 8000cea:	460b      	mov	r3, r1
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	440b      	add	r3, r1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	1ad1      	subs	r1, r2, r3
 8000cf4:	4608      	mov	r0, r1
 8000cf6:	f7ff fd4b 	bl	8000790 <displaySEG7_2>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	66666667 	.word	0x66666667

08000d08 <auto_run>:
 *      Author: ad
 */
#include "fsm_auto.h"


void auto_run(){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	if (isButtonPressed(0) == 1 ){
 8000d0c:	2000      	movs	r0, #0
 8000d0e:	f7ff fa1d 	bl	800014c <isButtonPressed>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b01      	cmp	r3, #1
 8000d16:	d108      	bne.n	8000d2a <auto_run+0x22>
		HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8000d1e:	4899      	ldr	r0, [pc, #612]	; (8000f84 <auto_run+0x27c>)
 8000d20:	f001 f921 	bl	8001f66 <HAL_GPIO_WritePin>
		                          |EN4_Pin|EN5_Pin, GPIO_PIN_SET);
		MODE = MODE2;
 8000d24:	4b98      	ldr	r3, [pc, #608]	; (8000f88 <auto_run+0x280>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	701a      	strb	r2, [r3, #0]
	}
	if(MODE == MODE1){
 8000d2a:	4b97      	ldr	r3, [pc, #604]	; (8000f88 <auto_run+0x280>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b01      	cmp	r3, #1
 8000d30:	f040 8125 	bne.w	8000f7e <auto_run+0x276>
		switch(firstCoupleLedAutoState){
 8000d34:	4b95      	ldr	r3, [pc, #596]	; (8000f8c <auto_run+0x284>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d867      	bhi.n	8000e0c <auto_run+0x104>
 8000d3c:	a201      	add	r2, pc, #4	; (adr r2, 8000d44 <auto_run+0x3c>)
 8000d3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d42:	bf00      	nop
 8000d44:	08000d55 	.word	0x08000d55
 8000d48:	08000d65 	.word	0x08000d65
 8000d4c:	08000d9d 	.word	0x08000d9d
 8000d50:	08000dd5 	.word	0x08000dd5
			case LED_INIT:
				firstCoupleLedAutoState = RED;
 8000d54:	4b8d      	ldr	r3, [pc, #564]	; (8000f8c <auto_run+0x284>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
				setTimer(0, 100);
 8000d5a:	2164      	movs	r1, #100	; 0x64
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f000 fd1b 	bl	8001798 <setTimer>
				break;
 8000d62:	e05a      	b.n	8000e1a <auto_run+0x112>
			case RED:
				displayFirstLedCouple(RED);
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff fa9b 	bl	80002a0 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 8000d6a:	4b89      	ldr	r3, [pc, #548]	; (8000f90 <auto_run+0x288>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d14e      	bne.n	8000e10 <auto_run+0x108>
					countdownFirstCoupleLed--;
 8000d72:	4b88      	ldr	r3, [pc, #544]	; (8000f94 <auto_run+0x28c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a86      	ldr	r2, [pc, #536]	; (8000f94 <auto_run+0x28c>)
 8000d7a:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 8000d7c:	4b85      	ldr	r3, [pc, #532]	; (8000f94 <auto_run+0x28c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d106      	bne.n	8000d92 <auto_run+0x8a>
						countdownFirstCoupleLed = greenDelay;
 8000d84:	4b84      	ldr	r3, [pc, #528]	; (8000f98 <auto_run+0x290>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a82      	ldr	r2, [pc, #520]	; (8000f94 <auto_run+0x28c>)
 8000d8a:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = GREEN;
 8000d8c:	4b7f      	ldr	r3, [pc, #508]	; (8000f8c <auto_run+0x284>)
 8000d8e:	2202      	movs	r2, #2
 8000d90:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 8000d92:	2164      	movs	r1, #100	; 0x64
 8000d94:	2000      	movs	r0, #0
 8000d96:	f000 fcff 	bl	8001798 <setTimer>
				}
				break;
 8000d9a:	e039      	b.n	8000e10 <auto_run+0x108>
			case GREEN:
				displayFirstLedCouple(GREEN);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff fa7f 	bl	80002a0 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 8000da2:	4b7b      	ldr	r3, [pc, #492]	; (8000f90 <auto_run+0x288>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d134      	bne.n	8000e14 <auto_run+0x10c>
					countdownFirstCoupleLed--;
 8000daa:	4b7a      	ldr	r3, [pc, #488]	; (8000f94 <auto_run+0x28c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	4a78      	ldr	r2, [pc, #480]	; (8000f94 <auto_run+0x28c>)
 8000db2:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 8000db4:	4b77      	ldr	r3, [pc, #476]	; (8000f94 <auto_run+0x28c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d106      	bne.n	8000dca <auto_run+0xc2>
						countdownFirstCoupleLed = yellowDelay;
 8000dbc:	4b77      	ldr	r3, [pc, #476]	; (8000f9c <auto_run+0x294>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a74      	ldr	r2, [pc, #464]	; (8000f94 <auto_run+0x28c>)
 8000dc2:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = YELLOW;
 8000dc4:	4b71      	ldr	r3, [pc, #452]	; (8000f8c <auto_run+0x284>)
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 8000dca:	2164      	movs	r1, #100	; 0x64
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f000 fce3 	bl	8001798 <setTimer>
				}
				break;
 8000dd2:	e01f      	b.n	8000e14 <auto_run+0x10c>
			case YELLOW:
				displayFirstLedCouple(YELLOW);
 8000dd4:	2003      	movs	r0, #3
 8000dd6:	f7ff fa63 	bl	80002a0 <displayFirstLedCouple>
				if(timer_flag[0] == 1){
 8000dda:	4b6d      	ldr	r3, [pc, #436]	; (8000f90 <auto_run+0x288>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d11a      	bne.n	8000e18 <auto_run+0x110>
					countdownFirstCoupleLed--;
 8000de2:	4b6c      	ldr	r3, [pc, #432]	; (8000f94 <auto_run+0x28c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	3b01      	subs	r3, #1
 8000de8:	4a6a      	ldr	r2, [pc, #424]	; (8000f94 <auto_run+0x28c>)
 8000dea:	6013      	str	r3, [r2, #0]
					if(countdownFirstCoupleLed == 0){
 8000dec:	4b69      	ldr	r3, [pc, #420]	; (8000f94 <auto_run+0x28c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d106      	bne.n	8000e02 <auto_run+0xfa>
						countdownFirstCoupleLed = redDelay;
 8000df4:	4b6a      	ldr	r3, [pc, #424]	; (8000fa0 <auto_run+0x298>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a66      	ldr	r2, [pc, #408]	; (8000f94 <auto_run+0x28c>)
 8000dfa:	6013      	str	r3, [r2, #0]
						firstCoupleLedAutoState = RED;
 8000dfc:	4b63      	ldr	r3, [pc, #396]	; (8000f8c <auto_run+0x284>)
 8000dfe:	2201      	movs	r2, #1
 8000e00:	701a      	strb	r2, [r3, #0]
					}
					setTimer(0, 100);
 8000e02:	2164      	movs	r1, #100	; 0x64
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 fcc7 	bl	8001798 <setTimer>
				}
				break;
 8000e0a:	e005      	b.n	8000e18 <auto_run+0x110>
			default:
				break;
 8000e0c:	bf00      	nop
 8000e0e:	e004      	b.n	8000e1a <auto_run+0x112>
				break;
 8000e10:	bf00      	nop
 8000e12:	e002      	b.n	8000e1a <auto_run+0x112>
				break;
 8000e14:	bf00      	nop
 8000e16:	e000      	b.n	8000e1a <auto_run+0x112>
				break;
 8000e18:	bf00      	nop
		}
		switch(secondCoupleLedAutoState){
 8000e1a:	4b62      	ldr	r3, [pc, #392]	; (8000fa4 <auto_run+0x29c>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d866      	bhi.n	8000ef0 <auto_run+0x1e8>
 8000e22:	a201      	add	r2, pc, #4	; (adr r2, 8000e28 <auto_run+0x120>)
 8000e24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e28:	08000e39 	.word	0x08000e39
 8000e2c:	08000e49 	.word	0x08000e49
 8000e30:	08000e81 	.word	0x08000e81
 8000e34:	08000eb9 	.word	0x08000eb9
			case LED_INIT:
				secondCoupleLedAutoState = GREEN;
 8000e38:	4b5a      	ldr	r3, [pc, #360]	; (8000fa4 <auto_run+0x29c>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	701a      	strb	r2, [r3, #0]
				setTimer(1, 100);
 8000e3e:	2164      	movs	r1, #100	; 0x64
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fca9 	bl	8001798 <setTimer>
				break;
 8000e46:	e05a      	b.n	8000efe <auto_run+0x1f6>
			case RED:
				displaySecondLedCouple(RED);
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f7ff fa85 	bl	8000358 <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000e4e:	4b50      	ldr	r3, [pc, #320]	; (8000f90 <auto_run+0x288>)
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d14e      	bne.n	8000ef4 <auto_run+0x1ec>
					countdownSecondCoupleLed--;
 8000e56:	4b54      	ldr	r3, [pc, #336]	; (8000fa8 <auto_run+0x2a0>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	4a52      	ldr	r2, [pc, #328]	; (8000fa8 <auto_run+0x2a0>)
 8000e5e:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000e60:	4b51      	ldr	r3, [pc, #324]	; (8000fa8 <auto_run+0x2a0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d106      	bne.n	8000e76 <auto_run+0x16e>
						countdownSecondCoupleLed = greenDelay;
 8000e68:	4b4b      	ldr	r3, [pc, #300]	; (8000f98 <auto_run+0x290>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a4e      	ldr	r2, [pc, #312]	; (8000fa8 <auto_run+0x2a0>)
 8000e6e:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = GREEN;
 8000e70:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <auto_run+0x29c>)
 8000e72:	2202      	movs	r2, #2
 8000e74:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000e76:	2164      	movs	r1, #100	; 0x64
 8000e78:	2001      	movs	r0, #1
 8000e7a:	f000 fc8d 	bl	8001798 <setTimer>
				}
				break;
 8000e7e:	e039      	b.n	8000ef4 <auto_run+0x1ec>
			case GREEN:
				displaySecondLedCouple(GREEN);
 8000e80:	2002      	movs	r0, #2
 8000e82:	f7ff fa69 	bl	8000358 <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000e86:	4b42      	ldr	r3, [pc, #264]	; (8000f90 <auto_run+0x288>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d134      	bne.n	8000ef8 <auto_run+0x1f0>
					countdownSecondCoupleLed--;
 8000e8e:	4b46      	ldr	r3, [pc, #280]	; (8000fa8 <auto_run+0x2a0>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a44      	ldr	r2, [pc, #272]	; (8000fa8 <auto_run+0x2a0>)
 8000e96:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <auto_run+0x2a0>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d106      	bne.n	8000eae <auto_run+0x1a6>
						countdownSecondCoupleLed = yellowDelay;
 8000ea0:	4b3e      	ldr	r3, [pc, #248]	; (8000f9c <auto_run+0x294>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a40      	ldr	r2, [pc, #256]	; (8000fa8 <auto_run+0x2a0>)
 8000ea6:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = YELLOW;
 8000ea8:	4b3e      	ldr	r3, [pc, #248]	; (8000fa4 <auto_run+0x29c>)
 8000eaa:	2203      	movs	r2, #3
 8000eac:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000eae:	2164      	movs	r1, #100	; 0x64
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	f000 fc71 	bl	8001798 <setTimer>
				}
				break;
 8000eb6:	e01f      	b.n	8000ef8 <auto_run+0x1f0>
			case YELLOW:
				displaySecondLedCouple(YELLOW);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f7ff fa4d 	bl	8000358 <displaySecondLedCouple>
				if(timer_flag[1] == 1){
 8000ebe:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <auto_run+0x288>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d11a      	bne.n	8000efc <auto_run+0x1f4>
					countdownSecondCoupleLed--;
 8000ec6:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <auto_run+0x2a0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	4a36      	ldr	r2, [pc, #216]	; (8000fa8 <auto_run+0x2a0>)
 8000ece:	6013      	str	r3, [r2, #0]
					if(countdownSecondCoupleLed == 0){
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <auto_run+0x2a0>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d106      	bne.n	8000ee6 <auto_run+0x1de>
						countdownSecondCoupleLed = redDelay;
 8000ed8:	4b31      	ldr	r3, [pc, #196]	; (8000fa0 <auto_run+0x298>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a32      	ldr	r2, [pc, #200]	; (8000fa8 <auto_run+0x2a0>)
 8000ede:	6013      	str	r3, [r2, #0]
						secondCoupleLedAutoState = RED;
 8000ee0:	4b30      	ldr	r3, [pc, #192]	; (8000fa4 <auto_run+0x29c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
					}
					setTimer(1, 100);
 8000ee6:	2164      	movs	r1, #100	; 0x64
 8000ee8:	2001      	movs	r0, #1
 8000eea:	f000 fc55 	bl	8001798 <setTimer>
				}
				break;
 8000eee:	e005      	b.n	8000efc <auto_run+0x1f4>
			default:
				break;
 8000ef0:	bf00      	nop
 8000ef2:	e004      	b.n	8000efe <auto_run+0x1f6>
				break;
 8000ef4:	bf00      	nop
 8000ef6:	e002      	b.n	8000efe <auto_run+0x1f6>
				break;
 8000ef8:	bf00      	nop
 8000efa:	e000      	b.n	8000efe <auto_run+0x1f6>
				break;
 8000efc:	bf00      	nop
		}

		switch(seg7AutoState){
 8000efe:	4b2b      	ldr	r3, [pc, #172]	; (8000fac <auto_run+0x2a4>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d022      	beq.n	8000f4c <auto_run+0x244>
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	dc34      	bgt.n	8000f74 <auto_run+0x26c>
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d002      	beq.n	8000f14 <auto_run+0x20c>
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d008      	beq.n	8000f24 <auto_run+0x21c>
					seg7AutoState = FIRST;
					setTimer(2, 50);
				}
				break;
			default:
				break;
 8000f12:	e02f      	b.n	8000f74 <auto_run+0x26c>
				seg7AutoState = FIRST;
 8000f14:	4b25      	ldr	r3, [pc, #148]	; (8000fac <auto_run+0x2a4>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]
				setTimer(2, 1);
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	2002      	movs	r0, #2
 8000f1e:	f000 fc3b 	bl	8001798 <setTimer>
				break;
 8000f22:	e02c      	b.n	8000f7e <auto_run+0x276>
				if(timer_flag[2] == 1){
 8000f24:	4b1a      	ldr	r3, [pc, #104]	; (8000f90 <auto_run+0x288>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d125      	bne.n	8000f78 <auto_run+0x270>
					showTimeDelay_First(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000f2c:	4b19      	ldr	r3, [pc, #100]	; (8000f94 <auto_run+0x28c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1d      	ldr	r2, [pc, #116]	; (8000fa8 <auto_run+0x2a0>)
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff fe62 	bl	8000c00 <showTimeDelay_First>
					seg7AutoState = SECOND;
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <auto_run+0x2a4>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	701a      	strb	r2, [r3, #0]
					setTimer(2, 50);
 8000f42:	2132      	movs	r1, #50	; 0x32
 8000f44:	2002      	movs	r0, #2
 8000f46:	f000 fc27 	bl	8001798 <setTimer>
				break;
 8000f4a:	e015      	b.n	8000f78 <auto_run+0x270>
				if(timer_flag[2] == 1){
 8000f4c:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <auto_run+0x288>)
 8000f4e:	689b      	ldr	r3, [r3, #8]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d113      	bne.n	8000f7c <auto_run+0x274>
					showTimeDelay_Second(countdownFirstCoupleLed, countdownSecondCoupleLed);
 8000f54:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <auto_run+0x28c>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a13      	ldr	r2, [pc, #76]	; (8000fa8 <auto_run+0x2a0>)
 8000f5a:	6812      	ldr	r2, [r2, #0]
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe72 	bl	8000c48 <showTimeDelay_Second>
					seg7AutoState = FIRST;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <auto_run+0x2a4>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	701a      	strb	r2, [r3, #0]
					setTimer(2, 50);
 8000f6a:	2132      	movs	r1, #50	; 0x32
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f000 fc13 	bl	8001798 <setTimer>
				break;
 8000f72:	e003      	b.n	8000f7c <auto_run+0x274>
				break;
 8000f74:	bf00      	nop
 8000f76:	e002      	b.n	8000f7e <auto_run+0x276>
				break;
 8000f78:	bf00      	nop
 8000f7a:	e000      	b.n	8000f7e <auto_run+0x276>
				break;
 8000f7c:	bf00      	nop
		}
	}
}
 8000f7e:	bf00      	nop
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	40010800 	.word	0x40010800
 8000f88:	20000080 	.word	0x20000080
 8000f8c:	2000008a 	.word	0x2000008a
 8000f90:	20000108 	.word	0x20000108
 8000f94:	20000090 	.word	0x20000090
 8000f98:	20000044 	.word	0x20000044
 8000f9c:	20000048 	.word	0x20000048
 8000fa0:	20000040 	.word	0x20000040
 8000fa4:	2000008b 	.word	0x2000008b
 8000fa8:	20000094 	.word	0x20000094
 8000fac:	2000008c 	.word	0x2000008c

08000fb0 <mode2_run>:
 *      Author: ad
 */

#include "fsm_manual.h"

void mode2_run(){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	switch(mode2Toggle){
 8000fb4:	4b51      	ldr	r3, [pc, #324]	; (80010fc <mode2_run+0x14c>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d002      	beq.n	8000fc2 <mode2_run+0x12>
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d00d      	beq.n	8000fdc <mode2_run+0x2c>
				toggleLeds(RED);
				setTimer(3, 25);
			}
			break;
		default:
			break;
 8000fc0:	e018      	b.n	8000ff4 <mode2_run+0x44>
			HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	217e      	movs	r1, #126	; 0x7e
 8000fc6:	484e      	ldr	r0, [pc, #312]	; (8001100 <mode2_run+0x150>)
 8000fc8:	f000 ffcd 	bl	8001f66 <HAL_GPIO_WritePin>
			mode2Toggle = TOGGLE;
 8000fcc:	4b4b      	ldr	r3, [pc, #300]	; (80010fc <mode2_run+0x14c>)
 8000fce:	2201      	movs	r2, #1
 8000fd0:	701a      	strb	r2, [r3, #0]
			setTimer(3, 25);
 8000fd2:	2119      	movs	r1, #25
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 fbdf 	bl	8001798 <setTimer>
			break;
 8000fda:	e00b      	b.n	8000ff4 <mode2_run+0x44>
			if(timer_flag[3] == 1){
 8000fdc:	4b49      	ldr	r3, [pc, #292]	; (8001104 <mode2_run+0x154>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d106      	bne.n	8000ff2 <mode2_run+0x42>
				toggleLeds(RED);
 8000fe4:	2001      	movs	r0, #1
 8000fe6:	f7ff fa13 	bl	8000410 <toggleLeds>
				setTimer(3, 25);
 8000fea:	2119      	movs	r1, #25
 8000fec:	2003      	movs	r0, #3
 8000fee:	f000 fbd3 	bl	8001798 <setTimer>
			break;
 8000ff2:	bf00      	nop
	}

	switch(mode2Increase){
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <mode2_run+0x158>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d002      	beq.n	8001002 <mode2_run+0x52>
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d014      	beq.n	800102a <mode2_run+0x7a>
					setValues();
				}
				break;

			default:
				break;
 8001000:	e03f      	b.n	8001082 <mode2_run+0xd2>
				if (isButtonPressed(1)==1){
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff f8a2 	bl	800014c <isButtonPressed>
 8001008:	4603      	mov	r3, r0
 800100a:	2b01      	cmp	r3, #1
 800100c:	d136      	bne.n	800107c <mode2_run+0xcc>
					mode2Increase = INCREASE;
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <mode2_run+0x158>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
					redDelay +=1;
 8001014:	4b3d      	ldr	r3, [pc, #244]	; (800110c <mode2_run+0x15c>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	3301      	adds	r3, #1
 800101a:	4a3c      	ldr	r2, [pc, #240]	; (800110c <mode2_run+0x15c>)
 800101c:	6013      	str	r3, [r2, #0]
					greenDelay +=1;
 800101e:	4b3c      	ldr	r3, [pc, #240]	; (8001110 <mode2_run+0x160>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a3a      	ldr	r2, [pc, #232]	; (8001110 <mode2_run+0x160>)
 8001026:	6013      	str	r3, [r2, #0]
				break;
 8001028:	e028      	b.n	800107c <mode2_run+0xcc>
				if (isButtonPressed(1)==1){
 800102a:	2001      	movs	r0, #1
 800102c:	f7ff f88e 	bl	800014c <isButtonPressed>
 8001030:	4603      	mov	r3, r0
 8001032:	2b01      	cmp	r3, #1
 8001034:	d110      	bne.n	8001058 <mode2_run+0xa8>
					redDelay +=1;
 8001036:	4b35      	ldr	r3, [pc, #212]	; (800110c <mode2_run+0x15c>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	3301      	adds	r3, #1
 800103c:	4a33      	ldr	r2, [pc, #204]	; (800110c <mode2_run+0x15c>)
 800103e:	6013      	str	r3, [r2, #0]
					greenDelay +=1;
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <mode2_run+0x160>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a32      	ldr	r2, [pc, #200]	; (8001110 <mode2_run+0x160>)
 8001048:	6013      	str	r3, [r2, #0]
					if(redDelay >= 99) redDelay = 1;
 800104a:	4b30      	ldr	r3, [pc, #192]	; (800110c <mode2_run+0x15c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b62      	cmp	r3, #98	; 0x62
 8001050:	dd02      	ble.n	8001058 <mode2_run+0xa8>
 8001052:	4b2e      	ldr	r3, [pc, #184]	; (800110c <mode2_run+0x15c>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8001058:	2002      	movs	r0, #2
 800105a:	f7ff f877 	bl	800014c <isButtonPressed>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d10d      	bne.n	8001080 <mode2_run+0xd0>
					HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 800106a:	4825      	ldr	r0, [pc, #148]	; (8001100 <mode2_run+0x150>)
 800106c:	f000 ff7b 	bl	8001f66 <HAL_GPIO_WritePin>
					MODE = MODE1;
 8001070:	4b28      	ldr	r3, [pc, #160]	; (8001114 <mode2_run+0x164>)
 8001072:	2201      	movs	r2, #1
 8001074:	701a      	strb	r2, [r3, #0]
					setValues();
 8001076:	f000 fa03 	bl	8001480 <setValues>
				break;
 800107a:	e001      	b.n	8001080 <mode2_run+0xd0>
				break;
 800107c:	bf00      	nop
 800107e:	e000      	b.n	8001082 <mode2_run+0xd2>
				break;
 8001080:	bf00      	nop
		}

	switch(mode2Seg){
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <mode2_run+0x168>)
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	2b02      	cmp	r3, #2
 8001088:	d01f      	beq.n	80010ca <mode2_run+0x11a>
 800108a:	2b02      	cmp	r3, #2
 800108c:	dc2e      	bgt.n	80010ec <mode2_run+0x13c>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <mode2_run+0xe8>
 8001092:	2b01      	cmp	r3, #1
 8001094:	d008      	beq.n	80010a8 <mode2_run+0xf8>
				setTimer(4, 25);
				mode2Seg = FIRST;
			}
			break;
		default:
			break;
 8001096:	e029      	b.n	80010ec <mode2_run+0x13c>
			mode2Seg = FIRST;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <mode2_run+0x168>)
 800109a:	2201      	movs	r2, #1
 800109c:	701a      	strb	r2, [r3, #0]
			setTimer(4, 25);
 800109e:	2119      	movs	r1, #25
 80010a0:	2004      	movs	r0, #4
 80010a2:	f000 fb79 	bl	8001798 <setTimer>
			break;
 80010a6:	e026      	b.n	80010f6 <mode2_run+0x146>
			if(timer_flag[4] == 1){
 80010a8:	4b16      	ldr	r3, [pc, #88]	; (8001104 <mode2_run+0x154>)
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d11f      	bne.n	80010f0 <mode2_run+0x140>
				showTimeDelay1(redDelay);
 80010b0:	4b16      	ldr	r3, [pc, #88]	; (800110c <mode2_run+0x15c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fdf5 	bl	8000ca4 <showTimeDelay1>
				mode2Seg = SECOND;
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <mode2_run+0x168>)
 80010bc:	2202      	movs	r2, #2
 80010be:	701a      	strb	r2, [r3, #0]
				setTimer(4, 25);
 80010c0:	2119      	movs	r1, #25
 80010c2:	2004      	movs	r0, #4
 80010c4:	f000 fb68 	bl	8001798 <setTimer>
			break;
 80010c8:	e012      	b.n	80010f0 <mode2_run+0x140>
			if(timer_flag[4] == 1){
 80010ca:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <mode2_run+0x154>)
 80010cc:	691b      	ldr	r3, [r3, #16]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d110      	bne.n	80010f4 <mode2_run+0x144>
				showTimeDelay2(redDelay);
 80010d2:	4b0e      	ldr	r3, [pc, #56]	; (800110c <mode2_run+0x15c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fdfa 	bl	8000cd0 <showTimeDelay2>
				setTimer(4, 25);
 80010dc:	2119      	movs	r1, #25
 80010de:	2004      	movs	r0, #4
 80010e0:	f000 fb5a 	bl	8001798 <setTimer>
				mode2Seg = FIRST;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <mode2_run+0x168>)
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
			break;
 80010ea:	e003      	b.n	80010f4 <mode2_run+0x144>
			break;
 80010ec:	bf00      	nop
 80010ee:	e002      	b.n	80010f6 <mode2_run+0x146>
			break;
 80010f0:	bf00      	nop
 80010f2:	e000      	b.n	80010f6 <mode2_run+0x146>
			break;
 80010f4:	bf00      	nop
	}
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000081 	.word	0x20000081
 8001100:	40010800 	.word	0x40010800
 8001104:	20000108 	.word	0x20000108
 8001108:	20000083 	.word	0x20000083
 800110c:	20000040 	.word	0x20000040
 8001110:	20000044 	.word	0x20000044
 8001114:	20000080 	.word	0x20000080
 8001118:	20000082 	.word	0x20000082

0800111c <mode3_run>:

void mode3_run(){
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
	switch(mode3Toggle){
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <mode3_run+0x14c>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <mode3_run+0x12>
 8001128:	2b01      	cmp	r3, #1
 800112a:	d00d      	beq.n	8001148 <mode3_run+0x2c>
				toggleLeds(YELLOW);
				setTimer(5, 25);
			}
			break;
		default:
			break;
 800112c:	e018      	b.n	8001160 <mode3_run+0x44>
			HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800112e:	2201      	movs	r2, #1
 8001130:	217e      	movs	r1, #126	; 0x7e
 8001132:	484e      	ldr	r0, [pc, #312]	; (800126c <mode3_run+0x150>)
 8001134:	f000 ff17 	bl	8001f66 <HAL_GPIO_WritePin>
			mode3Toggle = TOGGLE;
 8001138:	4b4b      	ldr	r3, [pc, #300]	; (8001268 <mode3_run+0x14c>)
 800113a:	2201      	movs	r2, #1
 800113c:	701a      	strb	r2, [r3, #0]
			setTimer(5, 25);
 800113e:	2119      	movs	r1, #25
 8001140:	2005      	movs	r0, #5
 8001142:	f000 fb29 	bl	8001798 <setTimer>
			break;
 8001146:	e00b      	b.n	8001160 <mode3_run+0x44>
			if(timer_flag[5] == 1){
 8001148:	4b49      	ldr	r3, [pc, #292]	; (8001270 <mode3_run+0x154>)
 800114a:	695b      	ldr	r3, [r3, #20]
 800114c:	2b01      	cmp	r3, #1
 800114e:	d106      	bne.n	800115e <mode3_run+0x42>
				toggleLeds(YELLOW);
 8001150:	2003      	movs	r0, #3
 8001152:	f7ff f95d 	bl	8000410 <toggleLeds>
				setTimer(5, 25);
 8001156:	2119      	movs	r1, #25
 8001158:	2005      	movs	r0, #5
 800115a:	f000 fb1d 	bl	8001798 <setTimer>
			break;
 800115e:	bf00      	nop
	}

	switch(mode3Increase){
 8001160:	4b44      	ldr	r3, [pc, #272]	; (8001274 <mode3_run+0x158>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d002      	beq.n	800116e <mode3_run+0x52>
 8001168:	2b01      	cmp	r3, #1
 800116a:	d014      	beq.n	8001196 <mode3_run+0x7a>
					setValues();
				}
				break;

			default:
				break;
 800116c:	e03f      	b.n	80011ee <mode3_run+0xd2>
				if (isButtonPressed(1)==1){
 800116e:	2001      	movs	r0, #1
 8001170:	f7fe ffec 	bl	800014c <isButtonPressed>
 8001174:	4603      	mov	r3, r0
 8001176:	2b01      	cmp	r3, #1
 8001178:	d136      	bne.n	80011e8 <mode3_run+0xcc>
					mode3Increase = INCREASE;
 800117a:	4b3e      	ldr	r3, [pc, #248]	; (8001274 <mode3_run+0x158>)
 800117c:	2201      	movs	r2, #1
 800117e:	701a      	strb	r2, [r3, #0]
					yellowDelay +=1;
 8001180:	4b3d      	ldr	r3, [pc, #244]	; (8001278 <mode3_run+0x15c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	4a3c      	ldr	r2, [pc, #240]	; (8001278 <mode3_run+0x15c>)
 8001188:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 800118a:	4b3c      	ldr	r3, [pc, #240]	; (800127c <mode3_run+0x160>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	3301      	adds	r3, #1
 8001190:	4a3a      	ldr	r2, [pc, #232]	; (800127c <mode3_run+0x160>)
 8001192:	6013      	str	r3, [r2, #0]
				break;
 8001194:	e028      	b.n	80011e8 <mode3_run+0xcc>
				if (isButtonPressed(1)==1){
 8001196:	2001      	movs	r0, #1
 8001198:	f7fe ffd8 	bl	800014c <isButtonPressed>
 800119c:	4603      	mov	r3, r0
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d110      	bne.n	80011c4 <mode3_run+0xa8>
					yellowDelay +=1;
 80011a2:	4b35      	ldr	r3, [pc, #212]	; (8001278 <mode3_run+0x15c>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	4a33      	ldr	r2, [pc, #204]	; (8001278 <mode3_run+0x15c>)
 80011aa:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 80011ac:	4b33      	ldr	r3, [pc, #204]	; (800127c <mode3_run+0x160>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	3301      	adds	r3, #1
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <mode3_run+0x160>)
 80011b4:	6013      	str	r3, [r2, #0]
					if(yellowDelay >= 99) yellowDelay = 1;
 80011b6:	4b30      	ldr	r3, [pc, #192]	; (8001278 <mode3_run+0x15c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b62      	cmp	r3, #98	; 0x62
 80011bc:	dd02      	ble.n	80011c4 <mode3_run+0xa8>
 80011be:	4b2e      	ldr	r3, [pc, #184]	; (8001278 <mode3_run+0x15c>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 80011c4:	2002      	movs	r0, #2
 80011c6:	f7fe ffc1 	bl	800014c <isButtonPressed>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d10d      	bne.n	80011ec <mode3_run+0xd0>
					HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80011d6:	4825      	ldr	r0, [pc, #148]	; (800126c <mode3_run+0x150>)
 80011d8:	f000 fec5 	bl	8001f66 <HAL_GPIO_WritePin>
					MODE = MODE1;
 80011dc:	4b28      	ldr	r3, [pc, #160]	; (8001280 <mode3_run+0x164>)
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
					setValues();
 80011e2:	f000 f94d 	bl	8001480 <setValues>
				break;
 80011e6:	e001      	b.n	80011ec <mode3_run+0xd0>
				break;
 80011e8:	bf00      	nop
 80011ea:	e000      	b.n	80011ee <mode3_run+0xd2>
				break;
 80011ec:	bf00      	nop
		}

	switch(mode3Seg){
 80011ee:	4b25      	ldr	r3, [pc, #148]	; (8001284 <mode3_run+0x168>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d01f      	beq.n	8001236 <mode3_run+0x11a>
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	dc2e      	bgt.n	8001258 <mode3_run+0x13c>
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <mode3_run+0xe8>
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d008      	beq.n	8001214 <mode3_run+0xf8>
				setTimer(6, 25);
				mode3Seg = FIRST;
			}
			break;
		default:
			break;
 8001202:	e029      	b.n	8001258 <mode3_run+0x13c>
			mode3Seg = FIRST;
 8001204:	4b1f      	ldr	r3, [pc, #124]	; (8001284 <mode3_run+0x168>)
 8001206:	2201      	movs	r2, #1
 8001208:	701a      	strb	r2, [r3, #0]
			setTimer(6, 25);
 800120a:	2119      	movs	r1, #25
 800120c:	2006      	movs	r0, #6
 800120e:	f000 fac3 	bl	8001798 <setTimer>
			break;
 8001212:	e026      	b.n	8001262 <mode3_run+0x146>
			if(timer_flag[6] == 1){
 8001214:	4b16      	ldr	r3, [pc, #88]	; (8001270 <mode3_run+0x154>)
 8001216:	699b      	ldr	r3, [r3, #24]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d11f      	bne.n	800125c <mode3_run+0x140>
				showTimeDelay1(yellowDelay);
 800121c:	4b16      	ldr	r3, [pc, #88]	; (8001278 <mode3_run+0x15c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fd3f 	bl	8000ca4 <showTimeDelay1>
				mode3Seg = SECOND;
 8001226:	4b17      	ldr	r3, [pc, #92]	; (8001284 <mode3_run+0x168>)
 8001228:	2202      	movs	r2, #2
 800122a:	701a      	strb	r2, [r3, #0]
				setTimer(6, 25);
 800122c:	2119      	movs	r1, #25
 800122e:	2006      	movs	r0, #6
 8001230:	f000 fab2 	bl	8001798 <setTimer>
			break;
 8001234:	e012      	b.n	800125c <mode3_run+0x140>
			if(timer_flag[6] == 1){
 8001236:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <mode3_run+0x154>)
 8001238:	699b      	ldr	r3, [r3, #24]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d110      	bne.n	8001260 <mode3_run+0x144>
				showTimeDelay2(yellowDelay);
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <mode3_run+0x15c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fd44 	bl	8000cd0 <showTimeDelay2>
				setTimer(6, 25);
 8001248:	2119      	movs	r1, #25
 800124a:	2006      	movs	r0, #6
 800124c:	f000 faa4 	bl	8001798 <setTimer>
				mode3Seg = FIRST;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <mode3_run+0x168>)
 8001252:	2201      	movs	r2, #1
 8001254:	701a      	strb	r2, [r3, #0]
			break;
 8001256:	e003      	b.n	8001260 <mode3_run+0x144>
			break;
 8001258:	bf00      	nop
 800125a:	e002      	b.n	8001262 <mode3_run+0x146>
			break;
 800125c:	bf00      	nop
 800125e:	e000      	b.n	8001262 <mode3_run+0x146>
			break;
 8001260:	bf00      	nop
	}
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000084 	.word	0x20000084
 800126c:	40010800 	.word	0x40010800
 8001270:	20000108 	.word	0x20000108
 8001274:	20000086 	.word	0x20000086
 8001278:	20000048 	.word	0x20000048
 800127c:	20000040 	.word	0x20000040
 8001280:	20000080 	.word	0x20000080
 8001284:	20000085 	.word	0x20000085

08001288 <mode4_run>:

void mode4_run(){
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	switch(mode4Toggle){
 800128c:	4b51      	ldr	r3, [pc, #324]	; (80013d4 <mode4_run+0x14c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <mode4_run+0x12>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d00d      	beq.n	80012b4 <mode4_run+0x2c>
				toggleLeds(GREEN);
				setTimer(7, 25);
			}
			break;
		default:
			break;
 8001298:	e018      	b.n	80012cc <mode4_run+0x44>
			HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 800129a:	2201      	movs	r2, #1
 800129c:	217e      	movs	r1, #126	; 0x7e
 800129e:	484e      	ldr	r0, [pc, #312]	; (80013d8 <mode4_run+0x150>)
 80012a0:	f000 fe61 	bl	8001f66 <HAL_GPIO_WritePin>
			mode4Toggle = TOGGLE;
 80012a4:	4b4b      	ldr	r3, [pc, #300]	; (80013d4 <mode4_run+0x14c>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	701a      	strb	r2, [r3, #0]
			setTimer(7, 25);
 80012aa:	2119      	movs	r1, #25
 80012ac:	2007      	movs	r0, #7
 80012ae:	f000 fa73 	bl	8001798 <setTimer>
			break;
 80012b2:	e00b      	b.n	80012cc <mode4_run+0x44>
			if(timer_flag[7] == 1){
 80012b4:	4b49      	ldr	r3, [pc, #292]	; (80013dc <mode4_run+0x154>)
 80012b6:	69db      	ldr	r3, [r3, #28]
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d106      	bne.n	80012ca <mode4_run+0x42>
				toggleLeds(GREEN);
 80012bc:	2002      	movs	r0, #2
 80012be:	f7ff f8a7 	bl	8000410 <toggleLeds>
				setTimer(7, 25);
 80012c2:	2119      	movs	r1, #25
 80012c4:	2007      	movs	r0, #7
 80012c6:	f000 fa67 	bl	8001798 <setTimer>
			break;
 80012ca:	bf00      	nop
	}

	switch(mode4Increase){
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <mode4_run+0x158>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d002      	beq.n	80012da <mode4_run+0x52>
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d014      	beq.n	8001302 <mode4_run+0x7a>
					setValues();
				}
				break;

			default:
				break;
 80012d8:	e03f      	b.n	800135a <mode4_run+0xd2>
				if (isButtonPressed(1)==1){
 80012da:	2001      	movs	r0, #1
 80012dc:	f7fe ff36 	bl	800014c <isButtonPressed>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d136      	bne.n	8001354 <mode4_run+0xcc>
					mode4Increase = INCREASE;
 80012e6:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <mode4_run+0x158>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
					greenDelay +=1;
 80012ec:	4b3d      	ldr	r3, [pc, #244]	; (80013e4 <mode4_run+0x15c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a3c      	ldr	r2, [pc, #240]	; (80013e4 <mode4_run+0x15c>)
 80012f4:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 80012f6:	4b3c      	ldr	r3, [pc, #240]	; (80013e8 <mode4_run+0x160>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	3301      	adds	r3, #1
 80012fc:	4a3a      	ldr	r2, [pc, #232]	; (80013e8 <mode4_run+0x160>)
 80012fe:	6013      	str	r3, [r2, #0]
				break;
 8001300:	e028      	b.n	8001354 <mode4_run+0xcc>
				if (isButtonPressed(1)==1){
 8001302:	2001      	movs	r0, #1
 8001304:	f7fe ff22 	bl	800014c <isButtonPressed>
 8001308:	4603      	mov	r3, r0
 800130a:	2b01      	cmp	r3, #1
 800130c:	d110      	bne.n	8001330 <mode4_run+0xa8>
					greenDelay +=1;
 800130e:	4b35      	ldr	r3, [pc, #212]	; (80013e4 <mode4_run+0x15c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	3301      	adds	r3, #1
 8001314:	4a33      	ldr	r2, [pc, #204]	; (80013e4 <mode4_run+0x15c>)
 8001316:	6013      	str	r3, [r2, #0]
					redDelay +=1;
 8001318:	4b33      	ldr	r3, [pc, #204]	; (80013e8 <mode4_run+0x160>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	4a32      	ldr	r2, [pc, #200]	; (80013e8 <mode4_run+0x160>)
 8001320:	6013      	str	r3, [r2, #0]
					if(greenDelay >= 99) greenDelay = 1;
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <mode4_run+0x15c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b62      	cmp	r3, #98	; 0x62
 8001328:	dd02      	ble.n	8001330 <mode4_run+0xa8>
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <mode4_run+0x15c>)
 800132c:	2201      	movs	r2, #1
 800132e:	601a      	str	r2, [r3, #0]
				if (isButtonPressed(2)==1){
 8001330:	2002      	movs	r0, #2
 8001332:	f7fe ff0b 	bl	800014c <isButtonPressed>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d10d      	bne.n	8001358 <mode4_run+0xd0>
					HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800133c:	2201      	movs	r2, #1
 800133e:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8001342:	4825      	ldr	r0, [pc, #148]	; (80013d8 <mode4_run+0x150>)
 8001344:	f000 fe0f 	bl	8001f66 <HAL_GPIO_WritePin>
					MODE = MODE1;
 8001348:	4b28      	ldr	r3, [pc, #160]	; (80013ec <mode4_run+0x164>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
					setValues();
 800134e:	f000 f897 	bl	8001480 <setValues>
				break;
 8001352:	e001      	b.n	8001358 <mode4_run+0xd0>
				break;
 8001354:	bf00      	nop
 8001356:	e000      	b.n	800135a <mode4_run+0xd2>
				break;
 8001358:	bf00      	nop
		}

	switch(mode4Seg){
 800135a:	4b25      	ldr	r3, [pc, #148]	; (80013f0 <mode4_run+0x168>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b02      	cmp	r3, #2
 8001360:	d01f      	beq.n	80013a2 <mode4_run+0x11a>
 8001362:	2b02      	cmp	r3, #2
 8001364:	dc2e      	bgt.n	80013c4 <mode4_run+0x13c>
 8001366:	2b00      	cmp	r3, #0
 8001368:	d002      	beq.n	8001370 <mode4_run+0xe8>
 800136a:	2b01      	cmp	r3, #1
 800136c:	d008      	beq.n	8001380 <mode4_run+0xf8>
				setTimer(8, 25);
				mode4Seg = FIRST;
			}
			break;
		default:
			break;
 800136e:	e029      	b.n	80013c4 <mode4_run+0x13c>
			mode4Seg = FIRST;
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <mode4_run+0x168>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
			setTimer(8, 25);
 8001376:	2119      	movs	r1, #25
 8001378:	2008      	movs	r0, #8
 800137a:	f000 fa0d 	bl	8001798 <setTimer>
			break;
 800137e:	e026      	b.n	80013ce <mode4_run+0x146>
			if(timer_flag[8] == 1){
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <mode4_run+0x154>)
 8001382:	6a1b      	ldr	r3, [r3, #32]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d11f      	bne.n	80013c8 <mode4_run+0x140>
				showTimeDelay1(greenDelay);
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <mode4_run+0x15c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fc89 	bl	8000ca4 <showTimeDelay1>
				mode4Seg = SECOND;
 8001392:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <mode4_run+0x168>)
 8001394:	2202      	movs	r2, #2
 8001396:	701a      	strb	r2, [r3, #0]
				setTimer(8, 25);
 8001398:	2119      	movs	r1, #25
 800139a:	2008      	movs	r0, #8
 800139c:	f000 f9fc 	bl	8001798 <setTimer>
			break;
 80013a0:	e012      	b.n	80013c8 <mode4_run+0x140>
			if(timer_flag[8] == 1){
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <mode4_run+0x154>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d110      	bne.n	80013cc <mode4_run+0x144>
				showTimeDelay2(greenDelay);
 80013aa:	4b0e      	ldr	r3, [pc, #56]	; (80013e4 <mode4_run+0x15c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fc8e 	bl	8000cd0 <showTimeDelay2>
				setTimer(8, 25);
 80013b4:	2119      	movs	r1, #25
 80013b6:	2008      	movs	r0, #8
 80013b8:	f000 f9ee 	bl	8001798 <setTimer>
				mode4Seg = FIRST;
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <mode4_run+0x168>)
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
			break;
 80013c2:	e003      	b.n	80013cc <mode4_run+0x144>
			break;
 80013c4:	bf00      	nop
 80013c6:	e002      	b.n	80013ce <mode4_run+0x146>
			break;
 80013c8:	bf00      	nop
 80013ca:	e000      	b.n	80013ce <mode4_run+0x146>
			break;
 80013cc:	bf00      	nop
	}
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000087 	.word	0x20000087
 80013d8:	40010800 	.word	0x40010800
 80013dc:	20000108 	.word	0x20000108
 80013e0:	20000089 	.word	0x20000089
 80013e4:	20000044 	.word	0x20000044
 80013e8:	20000040 	.word	0x20000040
 80013ec:	20000080 	.word	0x20000080
 80013f0:	20000088 	.word	0x20000088

080013f4 <manual_run>:

void manual_run(){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	af00      	add	r7, sp, #0
	switch(MODE){
 80013f8:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <manual_run+0x84>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d01e      	beq.n	800143e <manual_run+0x4a>
 8001400:	2b04      	cmp	r3, #4
 8001402:	dc30      	bgt.n	8001466 <manual_run+0x72>
 8001404:	2b02      	cmp	r3, #2
 8001406:	d002      	beq.n	800140e <manual_run+0x1a>
 8001408:	2b03      	cmp	r3, #3
 800140a:	d00c      	beq.n	8001426 <manual_run+0x32>
				MODE = MODE1;
				setValues();
			}
			break;
		default:
			break;
 800140c:	e02b      	b.n	8001466 <manual_run+0x72>
			mode2_run();
 800140e:	f7ff fdcf 	bl	8000fb0 <mode2_run>
			if (isButtonPressed(0) == 1){
 8001412:	2000      	movs	r0, #0
 8001414:	f7fe fe9a 	bl	800014c <isButtonPressed>
 8001418:	4603      	mov	r3, r0
 800141a:	2b01      	cmp	r3, #1
 800141c:	d125      	bne.n	800146a <manual_run+0x76>
				MODE = MODE3;
 800141e:	4b16      	ldr	r3, [pc, #88]	; (8001478 <manual_run+0x84>)
 8001420:	2203      	movs	r2, #3
 8001422:	701a      	strb	r2, [r3, #0]
			break;
 8001424:	e021      	b.n	800146a <manual_run+0x76>
			mode3_run();
 8001426:	f7ff fe79 	bl	800111c <mode3_run>
			if (isButtonPressed(0) == 1){
 800142a:	2000      	movs	r0, #0
 800142c:	f7fe fe8e 	bl	800014c <isButtonPressed>
 8001430:	4603      	mov	r3, r0
 8001432:	2b01      	cmp	r3, #1
 8001434:	d11b      	bne.n	800146e <manual_run+0x7a>
				MODE = MODE4;
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <manual_run+0x84>)
 8001438:	2204      	movs	r2, #4
 800143a:	701a      	strb	r2, [r3, #0]
			break;
 800143c:	e017      	b.n	800146e <manual_run+0x7a>
			mode4_run();
 800143e:	f7ff ff23 	bl	8001288 <mode4_run>
			if (isButtonPressed(0) == 1){
 8001442:	2000      	movs	r0, #0
 8001444:	f7fe fe82 	bl	800014c <isButtonPressed>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d111      	bne.n	8001472 <manual_run+0x7e>
				HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 800144e:	2201      	movs	r2, #1
 8001450:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 8001454:	4809      	ldr	r0, [pc, #36]	; (800147c <manual_run+0x88>)
 8001456:	f000 fd86 	bl	8001f66 <HAL_GPIO_WritePin>
				MODE = MODE1;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <manual_run+0x84>)
 800145c:	2201      	movs	r2, #1
 800145e:	701a      	strb	r2, [r3, #0]
				setValues();
 8001460:	f000 f80e 	bl	8001480 <setValues>
			break;
 8001464:	e005      	b.n	8001472 <manual_run+0x7e>
			break;
 8001466:	bf00      	nop
 8001468:	e004      	b.n	8001474 <manual_run+0x80>
			break;
 800146a:	bf00      	nop
 800146c:	e002      	b.n	8001474 <manual_run+0x80>
			break;
 800146e:	bf00      	nop
 8001470:	e000      	b.n	8001474 <manual_run+0x80>
			break;
 8001472:	bf00      	nop
	}
}
 8001474:	bf00      	nop
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000080 	.word	0x20000080
 800147c:	40010800 	.word	0x40010800

08001480 <setValues>:


int countdownFirstCoupleLed;
int countdownSecondCoupleLed;

void setValues(void){
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
	MODE = MODE1;
 8001484:	4b19      	ldr	r3, [pc, #100]	; (80014ec <setValues+0x6c>)
 8001486:	2201      	movs	r2, #1
 8001488:	701a      	strb	r2, [r3, #0]

	mode2Toggle = TOGGLE_INIT;
 800148a:	4b19      	ldr	r3, [pc, #100]	; (80014f0 <setValues+0x70>)
 800148c:	2200      	movs	r2, #0
 800148e:	701a      	strb	r2, [r3, #0]
	mode2Seg = SEG_INIT;
 8001490:	4b18      	ldr	r3, [pc, #96]	; (80014f4 <setValues+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	701a      	strb	r2, [r3, #0]
	mode2Increase = INCREASE_INIT;
 8001496:	4b18      	ldr	r3, [pc, #96]	; (80014f8 <setValues+0x78>)
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]

	mode3Toggle = TOGGLE_INIT;
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <setValues+0x7c>)
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
	mode3Seg = SEG_INIT;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <setValues+0x80>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	701a      	strb	r2, [r3, #0]
	mode3Increase = INCREASE_INIT;
 80014a8:	4b16      	ldr	r3, [pc, #88]	; (8001504 <setValues+0x84>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	701a      	strb	r2, [r3, #0]

	mode4Toggle = TOGGLE_INIT;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <setValues+0x88>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
	mode4Seg = SEG_INIT;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <setValues+0x8c>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	701a      	strb	r2, [r3, #0]
	mode4Increase = INCREASE_INIT;
 80014ba:	4b15      	ldr	r3, [pc, #84]	; (8001510 <setValues+0x90>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]

	firstCoupleLedAutoState = LED_INIT;
 80014c0:	4b14      	ldr	r3, [pc, #80]	; (8001514 <setValues+0x94>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	701a      	strb	r2, [r3, #0]
	secondCoupleLedAutoState = LED_INIT;
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <setValues+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
	seg7AutoState = SEG_INIT;
 80014cc:	4b13      	ldr	r3, [pc, #76]	; (800151c <setValues+0x9c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	701a      	strb	r2, [r3, #0]

	countdownFirstCoupleLed = redDelay;
 80014d2:	4b13      	ldr	r3, [pc, #76]	; (8001520 <setValues+0xa0>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a13      	ldr	r2, [pc, #76]	; (8001524 <setValues+0xa4>)
 80014d8:	6013      	str	r3, [r2, #0]
	countdownSecondCoupleLed = greenDelay;
 80014da:	4b13      	ldr	r3, [pc, #76]	; (8001528 <setValues+0xa8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <setValues+0xac>)
 80014e0:	6013      	str	r3, [r2, #0]
}
 80014e2:	bf00      	nop
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	20000080 	.word	0x20000080
 80014f0:	20000081 	.word	0x20000081
 80014f4:	20000082 	.word	0x20000082
 80014f8:	20000083 	.word	0x20000083
 80014fc:	20000084 	.word	0x20000084
 8001500:	20000085 	.word	0x20000085
 8001504:	20000086 	.word	0x20000086
 8001508:	20000087 	.word	0x20000087
 800150c:	20000088 	.word	0x20000088
 8001510:	20000089 	.word	0x20000089
 8001514:	2000008a 	.word	0x2000008a
 8001518:	2000008b 	.word	0x2000008b
 800151c:	2000008c 	.word	0x2000008c
 8001520:	20000040 	.word	0x20000040
 8001524:	20000090 	.word	0x20000090
 8001528:	20000044 	.word	0x20000044
 800152c:	20000094 	.word	0x20000094

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001534:	f000 fa14 	bl	8001960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001538:	f000 f814 	bl	8001564 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153c:	f000 f89a 	bl	8001674 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001540:	f000 f84c 	bl	80015dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001544:	4806      	ldr	r0, [pc, #24]	; (8001560 <main+0x30>)
 8001546:	f001 f96d 	bl	8002824 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setValues();
 800154a:	f7ff ff99 	bl	8001480 <setValues>
  displayFirstLedCouple(LED_INIT);
 800154e:	2000      	movs	r0, #0
 8001550:	f7fe fea6 	bl	80002a0 <displayFirstLedCouple>
  while (1)
  {
    /* USER CODE END WHILE */
	  auto_run();
 8001554:	f7ff fbd8 	bl	8000d08 <auto_run>
	  manual_run();
 8001558:	f7ff ff4c 	bl	80013f4 <manual_run>
	  auto_run();
 800155c:	e7fa      	b.n	8001554 <main+0x24>
 800155e:	bf00      	nop
 8001560:	20000098 	.word	0x20000098

08001564 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b090      	sub	sp, #64	; 0x40
 8001568:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800156a:	f107 0318 	add.w	r3, r7, #24
 800156e:	2228      	movs	r2, #40	; 0x28
 8001570:	2100      	movs	r1, #0
 8001572:	4618      	mov	r0, r3
 8001574:	f001 fcee 	bl	8002f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001578:	1d3b      	adds	r3, r7, #4
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
 8001582:	60da      	str	r2, [r3, #12]
 8001584:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001586:	2302      	movs	r3, #2
 8001588:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800158a:	2301      	movs	r3, #1
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800158e:	2310      	movs	r3, #16
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001592:	2300      	movs	r3, #0
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001596:	f107 0318 	add.w	r3, r7, #24
 800159a:	4618      	mov	r0, r3
 800159c:	f000 fd14 	bl	8001fc8 <HAL_RCC_OscConfig>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015a6:	f000 f8f2 	bl	800178e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015aa:	230f      	movs	r3, #15
 80015ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015ae:	2300      	movs	r3, #0
 80015b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ba:	2300      	movs	r3, #0
 80015bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015be:	1d3b      	adds	r3, r7, #4
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f000 ff82 	bl	80024cc <HAL_RCC_ClockConfig>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80015ce:	f000 f8de 	bl	800178e <Error_Handler>
  }
}
 80015d2:	bf00      	nop
 80015d4:	3740      	adds	r7, #64	; 0x40
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f0:	463b      	mov	r3, r7
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80015f8:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <MX_TIM2_Init+0x94>)
 80015fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001600:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <MX_TIM2_Init+0x94>)
 8001602:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001606:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001608:	4b19      	ldr	r3, [pc, #100]	; (8001670 <MX_TIM2_Init+0x94>)
 800160a:	2200      	movs	r2, #0
 800160c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <MX_TIM2_Init+0x94>)
 8001610:	220a      	movs	r2, #10
 8001612:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001614:	4b16      	ldr	r3, [pc, #88]	; (8001670 <MX_TIM2_Init+0x94>)
 8001616:	2200      	movs	r2, #0
 8001618:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <MX_TIM2_Init+0x94>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001620:	4813      	ldr	r0, [pc, #76]	; (8001670 <MX_TIM2_Init+0x94>)
 8001622:	f001 f8af 	bl	8002784 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800162c:	f000 f8af 	bl	800178e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0308 	add.w	r3, r7, #8
 800163a:	4619      	mov	r1, r3
 800163c:	480c      	ldr	r0, [pc, #48]	; (8001670 <MX_TIM2_Init+0x94>)
 800163e:	f001 fa45 	bl	8002acc <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001648:	f000 f8a1 	bl	800178e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164c:	2300      	movs	r3, #0
 800164e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001650:	2300      	movs	r3, #0
 8001652:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	4619      	mov	r1, r3
 8001658:	4805      	ldr	r0, [pc, #20]	; (8001670 <MX_TIM2_Init+0x94>)
 800165a:	f001 fc11 	bl	8002e80 <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001664:	f000 f893 	bl	800178e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	3718      	adds	r7, #24
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	20000098 	.word	0x20000098

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001688:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <MX_GPIO_Init+0xc4>)
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	4a2a      	ldr	r2, [pc, #168]	; (8001738 <MX_GPIO_Init+0xc4>)
 800168e:	f043 0304 	orr.w	r3, r3, #4
 8001692:	6193      	str	r3, [r2, #24]
 8001694:	4b28      	ldr	r3, [pc, #160]	; (8001738 <MX_GPIO_Init+0xc4>)
 8001696:	699b      	ldr	r3, [r3, #24]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a0:	4b25      	ldr	r3, [pc, #148]	; (8001738 <MX_GPIO_Init+0xc4>)
 80016a2:	699b      	ldr	r3, [r3, #24]
 80016a4:	4a24      	ldr	r2, [pc, #144]	; (8001738 <MX_GPIO_Init+0xc4>)
 80016a6:	f043 0308 	orr.w	r3, r3, #8
 80016aa:	6193      	str	r3, [r2, #24]
 80016ac:	4b22      	ldr	r3, [pc, #136]	; (8001738 <MX_GPIO_Init+0xc4>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	f003 0308 	and.w	r3, r3, #8
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80016b8:	2200      	movs	r2, #0
 80016ba:	217e      	movs	r1, #126	; 0x7e
 80016bc:	481f      	ldr	r0, [pc, #124]	; (800173c <MX_GPIO_Init+0xc8>)
 80016be:	f000 fc52 	bl	8001f66 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 80016c2:	2201      	movs	r2, #1
 80016c4:	f44f 51fc 	mov.w	r1, #8064	; 0x1f80
 80016c8:	481c      	ldr	r0, [pc, #112]	; (800173c <MX_GPIO_Init+0xc8>)
 80016ca:	f000 fc4c 	bl	8001f66 <HAL_GPIO_WritePin>
                          |EN4_Pin|EN5_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A1_Pin|B1_Pin|C1_Pin|D2_Pin
 80016ce:	2200      	movs	r2, #0
 80016d0:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80016d4:	481a      	ldr	r0, [pc, #104]	; (8001740 <MX_GPIO_Init+0xcc>)
 80016d6:	f000 fc46 	bl	8001f66 <HAL_GPIO_WritePin>
                          |B2_Pin|C2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin EN0_Pin EN1_Pin
                           EN2_Pin EN3_Pin EN4_Pin EN5_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 80016da:	f641 73fe 	movw	r3, #8190	; 0x1ffe
 80016de:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|EN0_Pin|EN1_Pin
                          |EN2_Pin|EN3_Pin|EN4_Pin|EN5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e0:	2301      	movs	r3, #1
 80016e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2302      	movs	r3, #2
 80016ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ec:	f107 0308 	add.w	r3, r7, #8
 80016f0:	4619      	mov	r1, r3
 80016f2:	4812      	ldr	r0, [pc, #72]	; (800173c <MX_GPIO_Init+0xc8>)
 80016f4:	f000 faa4 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : A1_Pin B1_Pin C1_Pin D2_Pin
                           E2_Pin F2_Pin G2_Pin D1_Pin
                           E1_Pin F1_Pin G1_Pin A2_Pin
                           B2_Pin C2_Pin */
  GPIO_InitStruct.Pin = A1_Pin|B1_Pin|C1_Pin|D2_Pin
 80016f8:	f643 73ff 	movw	r3, #16383	; 0x3fff
 80016fc:	60bb      	str	r3, [r7, #8]
                          |E2_Pin|F2_Pin|G2_Pin|D1_Pin
                          |E1_Pin|F1_Pin|G1_Pin|A2_Pin
                          |B2_Pin|C2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fe:	2301      	movs	r3, #1
 8001700:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2302      	movs	r3, #2
 8001708:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	4619      	mov	r1, r3
 8001710:	480b      	ldr	r0, [pc, #44]	; (8001740 <MX_GPIO_Init+0xcc>)
 8001712:	f000 fa95 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON1_Pin BUTTON2_Pin BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON1_Pin|BUTTON2_Pin|BUTTON3_Pin;
 8001716:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800171a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800171c:	2300      	movs	r3, #0
 800171e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001720:	2301      	movs	r3, #1
 8001722:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4619      	mov	r1, r3
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_GPIO_Init+0xc8>)
 800172c:	f000 fa88 	bl	8001c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001730:	bf00      	nop
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40021000 	.word	0x40021000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00

08001744 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	timerRun(0);
 800174c:	2000      	movs	r0, #0
 800174e:	f000 f83b 	bl	80017c8 <timerRun>
	timerRun(1);
 8001752:	2001      	movs	r0, #1
 8001754:	f000 f838 	bl	80017c8 <timerRun>
	timerRun(2);
 8001758:	2002      	movs	r0, #2
 800175a:	f000 f835 	bl	80017c8 <timerRun>
	timerRun(3);
 800175e:	2003      	movs	r0, #3
 8001760:	f000 f832 	bl	80017c8 <timerRun>
	timerRun(4);
 8001764:	2004      	movs	r0, #4
 8001766:	f000 f82f 	bl	80017c8 <timerRun>
	timerRun(5);
 800176a:	2005      	movs	r0, #5
 800176c:	f000 f82c 	bl	80017c8 <timerRun>
	timerRun(6);
 8001770:	2006      	movs	r0, #6
 8001772:	f000 f829 	bl	80017c8 <timerRun>
	timerRun(7);
 8001776:	2007      	movs	r0, #7
 8001778:	f000 f826 	bl	80017c8 <timerRun>
	timerRun(8);
 800177c:	2008      	movs	r0, #8
 800177e:	f000 f823 	bl	80017c8 <timerRun>
	getKeyInput();
 8001782:	f7fe fd0d 	bl	80001a0 <getKeyInput>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001792:	b672      	cpsid	i
}
 8001794:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001796:	e7fe      	b.n	8001796 <Error_Handler+0x8>

08001798 <setTimer>:
#include "software_timer.h"

int timer_counter[10] = {0};
int timer_flag[10] = {0};

void setTimer(int timer_ID, int duration){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
	timer_counter[timer_ID] = duration;
 80017a2:	4907      	ldr	r1, [pc, #28]	; (80017c0 <setTimer+0x28>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	timer_flag[timer_ID] = 0;
 80017ac:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <setTimer+0x2c>)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2100      	movs	r1, #0
 80017b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr
 80017c0:	200000e0 	.word	0x200000e0
 80017c4:	20000108 	.word	0x20000108

080017c8 <timerRun>:
void timerRun(int timer_ID){
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	if(timer_counter[timer_ID] > 0){
 80017d0:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <timerRun+0x48>)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	dd13      	ble.n	8001804 <timerRun+0x3c>
		timer_counter[timer_ID]--;
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <timerRun+0x48>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e4:	1e5a      	subs	r2, r3, #1
 80017e6:	490a      	ldr	r1, [pc, #40]	; (8001810 <timerRun+0x48>)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(timer_counter[timer_ID] <= 0){
 80017ee:	4a08      	ldr	r2, [pc, #32]	; (8001810 <timerRun+0x48>)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	dc04      	bgt.n	8001804 <timerRun+0x3c>
			timer_flag[timer_ID] = 1;
 80017fa:	4a06      	ldr	r2, [pc, #24]	; (8001814 <timerRun+0x4c>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2101      	movs	r1, #1
 8001800:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		}
	}
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	bc80      	pop	{r7}
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	200000e0 	.word	0x200000e0
 8001814:	20000108 	.word	0x20000108

08001818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <HAL_MspInit+0x40>)
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	4a0d      	ldr	r2, [pc, #52]	; (8001858 <HAL_MspInit+0x40>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6193      	str	r3, [r2, #24]
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <HAL_MspInit+0x40>)
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <HAL_MspInit+0x40>)
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	4a07      	ldr	r2, [pc, #28]	; (8001858 <HAL_MspInit+0x40>)
 800183c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001840:	61d3      	str	r3, [r2, #28]
 8001842:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_MspInit+0x40>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40021000 	.word	0x40021000

0800185c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800186c:	d113      	bne.n	8001896 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800186e:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	61d3      	str	r3, [r2, #28]
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <HAL_TIM_Base_MspInit+0x44>)
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	2100      	movs	r1, #0
 800188a:	201c      	movs	r0, #28
 800188c:	f000 f9a1 	bl	8001bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001890:	201c      	movs	r0, #28
 8001892:	f000 f9ba 	bl	8001c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40021000 	.word	0x40021000

080018a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <NMI_Handler+0x4>

080018aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ae:	e7fe      	b.n	80018ae <HardFault_Handler+0x4>

080018b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b4:	e7fe      	b.n	80018b4 <MemManage_Handler+0x4>

080018b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ba:	e7fe      	b.n	80018ba <BusFault_Handler+0x4>

080018bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018c0:	e7fe      	b.n	80018c0 <UsageFault_Handler+0x4>

080018c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bc80      	pop	{r7}
 80018e4:	4770      	bx	lr

080018e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ea:	f000 f87f 	bl	80019ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018f8:	4802      	ldr	r0, [pc, #8]	; (8001904 <TIM2_IRQHandler+0x10>)
 80018fa:	f000 ffdf 	bl	80028bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	20000098 	.word	0x20000098

08001908 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001914:	f7ff fff8 	bl	8001908 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001918:	480b      	ldr	r0, [pc, #44]	; (8001948 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800191a:	490c      	ldr	r1, [pc, #48]	; (800194c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800191c:	4a0c      	ldr	r2, [pc, #48]	; (8001950 <LoopFillZerobss+0x16>)
  movs r3, #0
 800191e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001920:	e002      	b.n	8001928 <LoopCopyDataInit>

08001922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001926:	3304      	adds	r3, #4

08001928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800192a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800192c:	d3f9      	bcc.n	8001922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001930:	4c09      	ldr	r4, [pc, #36]	; (8001958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001934:	e001      	b.n	800193a <LoopFillZerobss>

08001936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001938:	3204      	adds	r2, #4

0800193a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800193a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800193c:	d3fb      	bcc.n	8001936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800193e:	f001 fb11 	bl	8002f64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001942:	f7ff fdf5 	bl	8001530 <main>
  bx lr
 8001946:	4770      	bx	lr
  ldr r0, =_sdata
 8001948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800194c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001950:	08002ff0 	.word	0x08002ff0
  ldr r2, =_sbss
 8001954:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001958:	20000134 	.word	0x20000134

0800195c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC1_2_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	; (8001988 <HAL_Init+0x28>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_Init+0x28>)
 800196a:	f043 0310 	orr.w	r3, r3, #16
 800196e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f923 	bl	8001bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f000 f808 	bl	800198c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff ff4c 	bl	8001818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40022000 	.word	0x40022000

0800198c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001994:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_InitTick+0x54>)
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	4b12      	ldr	r3, [pc, #72]	; (80019e4 <HAL_InitTick+0x58>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	4619      	mov	r1, r3
 800199e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 f93b 	bl	8001c26 <HAL_SYSTICK_Config>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e00e      	b.n	80019d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2b0f      	cmp	r3, #15
 80019be:	d80a      	bhi.n	80019d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019c0:	2200      	movs	r2, #0
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	f04f 30ff 	mov.w	r0, #4294967295
 80019c8:	f000 f903 	bl	8001bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_InitTick+0x5c>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	e000      	b.n	80019d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	2000004c 	.word	0x2000004c
 80019e4:	20000054 	.word	0x20000054
 80019e8:	20000050 	.word	0x20000050

080019ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_IncTick+0x1c>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	461a      	mov	r2, r3
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_IncTick+0x20>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4413      	add	r3, r2
 80019fc:	4a03      	ldr	r2, [pc, #12]	; (8001a0c <HAL_IncTick+0x20>)
 80019fe:	6013      	str	r3, [r2, #0]
}
 8001a00:	bf00      	nop
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr
 8001a08:	20000054 	.word	0x20000054
 8001a0c:	20000130 	.word	0x20000130

08001a10 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return uwTick;
 8001a14:	4b02      	ldr	r3, [pc, #8]	; (8001a20 <HAL_GetTick+0x10>)
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bc80      	pop	{r7}
 8001a1e:	4770      	bx	lr
 8001a20:	20000130 	.word	0x20000130

08001a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f003 0307 	and.w	r3, r3, #7
 8001a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a40:	4013      	ands	r3, r2
 8001a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a56:	4a04      	ldr	r2, [pc, #16]	; (8001a68 <__NVIC_SetPriorityGrouping+0x44>)
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	60d3      	str	r3, [r2, #12]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bc80      	pop	{r7}
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a70:	4b04      	ldr	r3, [pc, #16]	; (8001a84 <__NVIC_GetPriorityGrouping+0x18>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	0a1b      	lsrs	r3, r3, #8
 8001a76:	f003 0307 	and.w	r3, r3, #7
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bc80      	pop	{r7}
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	db0b      	blt.n	8001ab2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	f003 021f 	and.w	r2, r3, #31
 8001aa0:	4906      	ldr	r1, [pc, #24]	; (8001abc <__NVIC_EnableIRQ+0x34>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	095b      	lsrs	r3, r3, #5
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8001aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	e000e100 	.word	0xe000e100

08001ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	6039      	str	r1, [r7, #0]
 8001aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	db0a      	blt.n	8001aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	b2da      	uxtb	r2, r3
 8001ad8:	490c      	ldr	r1, [pc, #48]	; (8001b0c <__NVIC_SetPriority+0x4c>)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	0112      	lsls	r2, r2, #4
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae8:	e00a      	b.n	8001b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	4908      	ldr	r1, [pc, #32]	; (8001b10 <__NVIC_SetPriority+0x50>)
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	f003 030f 	and.w	r3, r3, #15
 8001af6:	3b04      	subs	r3, #4
 8001af8:	0112      	lsls	r2, r2, #4
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	440b      	add	r3, r1
 8001afe:	761a      	strb	r2, [r3, #24]
}
 8001b00:	bf00      	nop
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100
 8001b10:	e000ed00 	.word	0xe000ed00

08001b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	; 0x24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 0307 	and.w	r3, r3, #7
 8001b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	f1c3 0307 	rsb	r3, r3, #7
 8001b2e:	2b04      	cmp	r3, #4
 8001b30:	bf28      	it	cs
 8001b32:	2304      	movcs	r3, #4
 8001b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3304      	adds	r3, #4
 8001b3a:	2b06      	cmp	r3, #6
 8001b3c:	d902      	bls.n	8001b44 <NVIC_EncodePriority+0x30>
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	3b03      	subs	r3, #3
 8001b42:	e000      	b.n	8001b46 <NVIC_EncodePriority+0x32>
 8001b44:	2300      	movs	r3, #0
 8001b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43da      	mvns	r2, r3
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	401a      	ands	r2, r3
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43d9      	mvns	r1, r3
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b6c:	4313      	orrs	r3, r2
         );
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3724      	adds	r7, #36	; 0x24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b88:	d301      	bcc.n	8001b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e00f      	b.n	8001bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b8e:	4a0a      	ldr	r2, [pc, #40]	; (8001bb8 <SysTick_Config+0x40>)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3b01      	subs	r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b96:	210f      	movs	r1, #15
 8001b98:	f04f 30ff 	mov.w	r0, #4294967295
 8001b9c:	f7ff ff90 	bl	8001ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ba0:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ba6:	4b04      	ldr	r3, [pc, #16]	; (8001bb8 <SysTick_Config+0x40>)
 8001ba8:	2207      	movs	r2, #7
 8001baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	e000e010 	.word	0xe000e010

08001bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f7ff ff2d 	bl	8001a24 <__NVIC_SetPriorityGrouping>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	4603      	mov	r3, r0
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
 8001bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be4:	f7ff ff42 	bl	8001a6c <__NVIC_GetPriorityGrouping>
 8001be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	68b9      	ldr	r1, [r7, #8]
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f7ff ff90 	bl	8001b14 <NVIC_EncodePriority>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfa:	4611      	mov	r1, r2
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff ff5f 	bl	8001ac0 <__NVIC_SetPriority>
}
 8001c02:	bf00      	nop
 8001c04:	3718      	adds	r7, #24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b082      	sub	sp, #8
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f7ff ff35 	bl	8001a88 <__NVIC_EnableIRQ>
}
 8001c1e:	bf00      	nop
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f7ff ffa2 	bl	8001b78 <SysTick_Config>
 8001c34:	4603      	mov	r3, r0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b08b      	sub	sp, #44	; 0x2c
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c52:	e161      	b.n	8001f18 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c54:	2201      	movs	r2, #1
 8001c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	69fa      	ldr	r2, [r7, #28]
 8001c64:	4013      	ands	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	f040 8150 	bne.w	8001f12 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a97      	ldr	r2, [pc, #604]	; (8001ed4 <HAL_GPIO_Init+0x294>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d05e      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c7c:	4a95      	ldr	r2, [pc, #596]	; (8001ed4 <HAL_GPIO_Init+0x294>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d875      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c82:	4a95      	ldr	r2, [pc, #596]	; (8001ed8 <HAL_GPIO_Init+0x298>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d058      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c88:	4a93      	ldr	r2, [pc, #588]	; (8001ed8 <HAL_GPIO_Init+0x298>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d86f      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c8e:	4a93      	ldr	r2, [pc, #588]	; (8001edc <HAL_GPIO_Init+0x29c>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d052      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001c94:	4a91      	ldr	r2, [pc, #580]	; (8001edc <HAL_GPIO_Init+0x29c>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d869      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001c9a:	4a91      	ldr	r2, [pc, #580]	; (8001ee0 <HAL_GPIO_Init+0x2a0>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d04c      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001ca0:	4a8f      	ldr	r2, [pc, #572]	; (8001ee0 <HAL_GPIO_Init+0x2a0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d863      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001ca6:	4a8f      	ldr	r2, [pc, #572]	; (8001ee4 <HAL_GPIO_Init+0x2a4>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d046      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
 8001cac:	4a8d      	ldr	r2, [pc, #564]	; (8001ee4 <HAL_GPIO_Init+0x2a4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d85d      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cb2:	2b12      	cmp	r3, #18
 8001cb4:	d82a      	bhi.n	8001d0c <HAL_GPIO_Init+0xcc>
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d859      	bhi.n	8001d6e <HAL_GPIO_Init+0x12e>
 8001cba:	a201      	add	r2, pc, #4	; (adr r2, 8001cc0 <HAL_GPIO_Init+0x80>)
 8001cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc0:	08001d3b 	.word	0x08001d3b
 8001cc4:	08001d15 	.word	0x08001d15
 8001cc8:	08001d27 	.word	0x08001d27
 8001ccc:	08001d69 	.word	0x08001d69
 8001cd0:	08001d6f 	.word	0x08001d6f
 8001cd4:	08001d6f 	.word	0x08001d6f
 8001cd8:	08001d6f 	.word	0x08001d6f
 8001cdc:	08001d6f 	.word	0x08001d6f
 8001ce0:	08001d6f 	.word	0x08001d6f
 8001ce4:	08001d6f 	.word	0x08001d6f
 8001ce8:	08001d6f 	.word	0x08001d6f
 8001cec:	08001d6f 	.word	0x08001d6f
 8001cf0:	08001d6f 	.word	0x08001d6f
 8001cf4:	08001d6f 	.word	0x08001d6f
 8001cf8:	08001d6f 	.word	0x08001d6f
 8001cfc:	08001d6f 	.word	0x08001d6f
 8001d00:	08001d6f 	.word	0x08001d6f
 8001d04:	08001d1d 	.word	0x08001d1d
 8001d08:	08001d31 	.word	0x08001d31
 8001d0c:	4a76      	ldr	r2, [pc, #472]	; (8001ee8 <HAL_GPIO_Init+0x2a8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d12:	e02c      	b.n	8001d6e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	623b      	str	r3, [r7, #32]
          break;
 8001d1a:	e029      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	3304      	adds	r3, #4
 8001d22:	623b      	str	r3, [r7, #32]
          break;
 8001d24:	e024      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	3308      	adds	r3, #8
 8001d2c:	623b      	str	r3, [r7, #32]
          break;
 8001d2e:	e01f      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	330c      	adds	r3, #12
 8001d36:	623b      	str	r3, [r7, #32]
          break;
 8001d38:	e01a      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d102      	bne.n	8001d48 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d42:	2304      	movs	r3, #4
 8001d44:	623b      	str	r3, [r7, #32]
          break;
 8001d46:	e013      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d105      	bne.n	8001d5c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d50:	2308      	movs	r3, #8
 8001d52:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69fa      	ldr	r2, [r7, #28]
 8001d58:	611a      	str	r2, [r3, #16]
          break;
 8001d5a:	e009      	b.n	8001d70 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d5c:	2308      	movs	r3, #8
 8001d5e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	615a      	str	r2, [r3, #20]
          break;
 8001d66:	e003      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	623b      	str	r3, [r7, #32]
          break;
 8001d6c:	e000      	b.n	8001d70 <HAL_GPIO_Init+0x130>
          break;
 8001d6e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2bff      	cmp	r3, #255	; 0xff
 8001d74:	d801      	bhi.n	8001d7a <HAL_GPIO_Init+0x13a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	e001      	b.n	8001d7e <HAL_GPIO_Init+0x13e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	2bff      	cmp	r3, #255	; 0xff
 8001d84:	d802      	bhi.n	8001d8c <HAL_GPIO_Init+0x14c>
 8001d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	e002      	b.n	8001d92 <HAL_GPIO_Init+0x152>
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8e:	3b08      	subs	r3, #8
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	210f      	movs	r1, #15
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001da0:	43db      	mvns	r3, r3
 8001da2:	401a      	ands	r2, r3
 8001da4:	6a39      	ldr	r1, [r7, #32]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dac:	431a      	orrs	r2, r3
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80a9 	beq.w	8001f12 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc0:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6193      	str	r3, [r2, #24]
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_GPIO_Init+0x2ac>)
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	60bb      	str	r3, [r7, #8]
 8001dd6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001dd8:	4a45      	ldr	r2, [pc, #276]	; (8001ef0 <HAL_GPIO_Init+0x2b0>)
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	220f      	movs	r2, #15
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	68fa      	ldr	r2, [r7, #12]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a3d      	ldr	r2, [pc, #244]	; (8001ef4 <HAL_GPIO_Init+0x2b4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00d      	beq.n	8001e20 <HAL_GPIO_Init+0x1e0>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a3c      	ldr	r2, [pc, #240]	; (8001ef8 <HAL_GPIO_Init+0x2b8>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d007      	beq.n	8001e1c <HAL_GPIO_Init+0x1dc>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a3b      	ldr	r2, [pc, #236]	; (8001efc <HAL_GPIO_Init+0x2bc>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d101      	bne.n	8001e18 <HAL_GPIO_Init+0x1d8>
 8001e14:	2302      	movs	r3, #2
 8001e16:	e004      	b.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e002      	b.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_GPIO_Init+0x1e2>
 8001e20:	2300      	movs	r3, #0
 8001e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	68fa      	ldr	r2, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e32:	492f      	ldr	r1, [pc, #188]	; (8001ef0 <HAL_GPIO_Init+0x2b0>)
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d006      	beq.n	8001e5a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e4e:	689a      	ldr	r2, [r3, #8]
 8001e50:	492b      	ldr	r1, [pc, #172]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	608b      	str	r3, [r1, #8]
 8001e58:	e006      	b.n	8001e68 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e5a:	4b29      	ldr	r3, [pc, #164]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e5c:	689a      	ldr	r2, [r3, #8]
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	43db      	mvns	r3, r3
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e64:	4013      	ands	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d006      	beq.n	8001e82 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e74:	4b22      	ldr	r3, [pc, #136]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	4921      	ldr	r1, [pc, #132]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	60cb      	str	r3, [r1, #12]
 8001e80:	e006      	b.n	8001e90 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e82:	4b1f      	ldr	r3, [pc, #124]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	491d      	ldr	r1, [pc, #116]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d006      	beq.n	8001eaa <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001e9e:	685a      	ldr	r2, [r3, #4]
 8001ea0:	4917      	ldr	r1, [pc, #92]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	604b      	str	r3, [r1, #4]
 8001ea8:	e006      	b.n	8001eb8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eaa:	4b15      	ldr	r3, [pc, #84]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001eac:	685a      	ldr	r2, [r3, #4]
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	4913      	ldr	r1, [pc, #76]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d01f      	beq.n	8001f04 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	490d      	ldr	r1, [pc, #52]	; (8001f00 <HAL_GPIO_Init+0x2c0>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	600b      	str	r3, [r1, #0]
 8001ed0:	e01f      	b.n	8001f12 <HAL_GPIO_Init+0x2d2>
 8001ed2:	bf00      	nop
 8001ed4:	10320000 	.word	0x10320000
 8001ed8:	10310000 	.word	0x10310000
 8001edc:	10220000 	.word	0x10220000
 8001ee0:	10210000 	.word	0x10210000
 8001ee4:	10120000 	.word	0x10120000
 8001ee8:	10110000 	.word	0x10110000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	40010000 	.word	0x40010000
 8001ef4:	40010800 	.word	0x40010800
 8001ef8:	40010c00 	.word	0x40010c00
 8001efc:	40011000 	.word	0x40011000
 8001f00:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f04:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <HAL_GPIO_Init+0x2f4>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	4909      	ldr	r1, [pc, #36]	; (8001f34 <HAL_GPIO_Init+0x2f4>)
 8001f0e:	4013      	ands	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	3301      	adds	r3, #1
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f47f ae96 	bne.w	8001c54 <HAL_GPIO_Init+0x14>
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	372c      	adds	r7, #44	; 0x2c
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	40010400 	.word	0x40010400

08001f38 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
 8001f40:	460b      	mov	r3, r1
 8001f42:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	887b      	ldrh	r3, [r7, #2]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
 8001f54:	e001      	b.n	8001f5a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b083      	sub	sp, #12
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]
 8001f72:	4613      	mov	r3, r2
 8001f74:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f76:	787b      	ldrb	r3, [r7, #1]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7c:	887a      	ldrh	r2, [r7, #2]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f82:	e003      	b.n	8001f8c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	041a      	lsls	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	611a      	str	r2, [r3, #16]
}
 8001f8c:	bf00      	nop
 8001f8e:	370c      	adds	r7, #12
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr

08001f96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	611a      	str	r2, [r3, #16]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e272      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f003 0301 	and.w	r3, r3, #1
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8087 	beq.w	80020f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe8:	4b92      	ldr	r3, [pc, #584]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 030c 	and.w	r3, r3, #12
 8001ff0:	2b04      	cmp	r3, #4
 8001ff2:	d00c      	beq.n	800200e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff4:	4b8f      	ldr	r3, [pc, #572]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 030c 	and.w	r3, r3, #12
 8001ffc:	2b08      	cmp	r3, #8
 8001ffe:	d112      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
 8002000:	4b8c      	ldr	r3, [pc, #560]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200c:	d10b      	bne.n	8002026 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d06c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x12c>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d168      	bne.n	80020f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e24c      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800202e:	d106      	bne.n	800203e <HAL_RCC_OscConfig+0x76>
 8002030:	4b80      	ldr	r3, [pc, #512]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a7f      	ldr	r2, [pc, #508]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800203a:	6013      	str	r3, [r2, #0]
 800203c:	e02e      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d10c      	bne.n	8002060 <HAL_RCC_OscConfig+0x98>
 8002046:	4b7b      	ldr	r3, [pc, #492]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a7a      	ldr	r2, [pc, #488]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800204c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002050:	6013      	str	r3, [r2, #0]
 8002052:	4b78      	ldr	r3, [pc, #480]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a77      	ldr	r2, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002058:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	e01d      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0xbc>
 800206a:	4b72      	ldr	r3, [pc, #456]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a71      	ldr	r2, [pc, #452]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002070:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	4b6f      	ldr	r3, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4a6e      	ldr	r2, [pc, #440]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800207c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0xd4>
 8002084:	4b6b      	ldr	r3, [pc, #428]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800208a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	4b68      	ldr	r3, [pc, #416]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a67      	ldr	r2, [pc, #412]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002096:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800209a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d013      	beq.n	80020cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fcb4 	bl	8001a10 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ac:	f7ff fcb0 	bl	8001a10 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b64      	cmp	r3, #100	; 0x64
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e200      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020be:	4b5d      	ldr	r3, [pc, #372]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d0f0      	beq.n	80020ac <HAL_RCC_OscConfig+0xe4>
 80020ca:	e014      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020cc:	f7ff fca0 	bl	8001a10 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d4:	f7ff fc9c 	bl	8001a10 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b64      	cmp	r3, #100	; 0x64
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e1ec      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020e6:	4b53      	ldr	r3, [pc, #332]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x10c>
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d063      	beq.n	80021ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002102:	4b4c      	ldr	r3, [pc, #304]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f003 030c 	and.w	r3, r3, #12
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00b      	beq.n	8002126 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800210e:	4b49      	ldr	r3, [pc, #292]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 030c 	and.w	r3, r3, #12
 8002116:	2b08      	cmp	r3, #8
 8002118:	d11c      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
 800211a:	4b46      	ldr	r3, [pc, #280]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d116      	bne.n	8002154 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002126:	4b43      	ldr	r3, [pc, #268]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e1c0      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800213e:	4b3d      	ldr	r3, [pc, #244]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4939      	ldr	r1, [pc, #228]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800214e:	4313      	orrs	r3, r2
 8002150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002152:	e03a      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d020      	beq.n	800219e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800215c:	4b36      	ldr	r3, [pc, #216]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 800215e:	2201      	movs	r2, #1
 8002160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002162:	f7ff fc55 	bl	8001a10 <HAL_GetTick>
 8002166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216a:	f7ff fc51 	bl	8001a10 <HAL_GetTick>
 800216e:	4602      	mov	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b02      	cmp	r3, #2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e1a1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217c:	4b2d      	ldr	r3, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d0f0      	beq.n	800216a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002188:	4b2a      	ldr	r3, [pc, #168]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4927      	ldr	r1, [pc, #156]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]
 800219c:	e015      	b.n	80021ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219e:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x270>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7ff fc34 	bl	8001a10 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ac:	f7ff fc30 	bl	8001a10 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e180      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021be:	4b1d      	ldr	r3, [pc, #116]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0308 	and.w	r3, r3, #8
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d03a      	beq.n	800224c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d019      	beq.n	8002212 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021de:	4b17      	ldr	r3, [pc, #92]	; (800223c <HAL_RCC_OscConfig+0x274>)
 80021e0:	2201      	movs	r2, #1
 80021e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e4:	f7ff fc14 	bl	8001a10 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ec:	f7ff fc10 	bl	8001a10 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e160      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021fe:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x26c>)
 8002200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0f0      	beq.n	80021ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220a:	2001      	movs	r0, #1
 800220c:	f000 fa9c 	bl	8002748 <RCC_Delay>
 8002210:	e01c      	b.n	800224c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_OscConfig+0x274>)
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7ff fbfa 	bl	8001a10 <HAL_GetTick>
 800221c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800221e:	e00f      	b.n	8002240 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002220:	f7ff fbf6 	bl	8001a10 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d908      	bls.n	8002240 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800222e:	2303      	movs	r3, #3
 8002230:	e146      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	42420000 	.word	0x42420000
 800223c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1e9      	bne.n	8002220 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a6 	beq.w	80023a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002260:	69db      	ldr	r3, [r3, #28]
 8002262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10d      	bne.n	8002286 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4a87      	ldr	r2, [pc, #540]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002274:	61d3      	str	r3, [r2, #28]
 8002276:	4b85      	ldr	r3, [pc, #532]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002282:	2301      	movs	r3, #1
 8002284:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d118      	bne.n	80022c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002292:	4b7f      	ldr	r3, [pc, #508]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7e      	ldr	r2, [pc, #504]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 8002298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800229c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229e:	f7ff fbb7 	bl	8001a10 <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a6:	f7ff fbb3 	bl	8001a10 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b64      	cmp	r3, #100	; 0x64
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e103      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022b8:	4b75      	ldr	r3, [pc, #468]	; (8002490 <HAL_RCC_OscConfig+0x4c8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d106      	bne.n	80022da <HAL_RCC_OscConfig+0x312>
 80022cc:	4b6f      	ldr	r3, [pc, #444]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	4a6e      	ldr	r2, [pc, #440]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	f043 0301 	orr.w	r3, r3, #1
 80022d6:	6213      	str	r3, [r2, #32]
 80022d8:	e02d      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x334>
 80022e2:	4b6a      	ldr	r3, [pc, #424]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6213      	str	r3, [r2, #32]
 80022ee:	4b67      	ldr	r3, [pc, #412]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	4a66      	ldr	r2, [pc, #408]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	f023 0304 	bic.w	r3, r3, #4
 80022f8:	6213      	str	r3, [r2, #32]
 80022fa:	e01c      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2b05      	cmp	r3, #5
 8002302:	d10c      	bne.n	800231e <HAL_RCC_OscConfig+0x356>
 8002304:	4b61      	ldr	r3, [pc, #388]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	4a60      	ldr	r2, [pc, #384]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800230a:	f043 0304 	orr.w	r3, r3, #4
 800230e:	6213      	str	r3, [r2, #32]
 8002310:	4b5e      	ldr	r3, [pc, #376]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	4a5d      	ldr	r2, [pc, #372]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002316:	f043 0301 	orr.w	r3, r3, #1
 800231a:	6213      	str	r3, [r2, #32]
 800231c:	e00b      	b.n	8002336 <HAL_RCC_OscConfig+0x36e>
 800231e:	4b5b      	ldr	r3, [pc, #364]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4a5a      	ldr	r2, [pc, #360]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f023 0301 	bic.w	r3, r3, #1
 8002328:	6213      	str	r3, [r2, #32]
 800232a:	4b58      	ldr	r3, [pc, #352]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	4a57      	ldr	r2, [pc, #348]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002330:	f023 0304 	bic.w	r3, r3, #4
 8002334:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233e:	f7ff fb67 	bl	8001a10 <HAL_GetTick>
 8002342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002344:	e00a      	b.n	800235c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002346:	f7ff fb63 	bl	8001a10 <HAL_GetTick>
 800234a:	4602      	mov	r2, r0
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	f241 3288 	movw	r2, #5000	; 0x1388
 8002354:	4293      	cmp	r3, r2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0b1      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235c:	4b4b      	ldr	r3, [pc, #300]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d0ee      	beq.n	8002346 <HAL_RCC_OscConfig+0x37e>
 8002368:	e014      	b.n	8002394 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236a:	f7ff fb51 	bl	8001a10 <HAL_GetTick>
 800236e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002370:	e00a      	b.n	8002388 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002372:	f7ff fb4d 	bl	8001a10 <HAL_GetTick>
 8002376:	4602      	mov	r2, r0
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002380:	4293      	cmp	r3, r2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e09b      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002388:	4b40      	ldr	r3, [pc, #256]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d1ee      	bne.n	8002372 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002394:	7dfb      	ldrb	r3, [r7, #23]
 8002396:	2b01      	cmp	r3, #1
 8002398:	d105      	bne.n	80023a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239a:	4b3c      	ldr	r3, [pc, #240]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	4a3b      	ldr	r2, [pc, #236]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69db      	ldr	r3, [r3, #28]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 8087 	beq.w	80024be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b0:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d061      	beq.n	8002480 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	69db      	ldr	r3, [r3, #28]
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d146      	bne.n	8002452 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c4:	4b33      	ldr	r3, [pc, #204]	; (8002494 <HAL_RCC_OscConfig+0x4cc>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ca:	f7ff fb21 	bl	8001a10 <HAL_GetTick>
 80023ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff fb1d 	bl	8001a10 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e06d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e4:	4b29      	ldr	r3, [pc, #164]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f8:	d108      	bne.n	800240c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fa:	4b24      	ldr	r3, [pc, #144]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	4921      	ldr	r1, [pc, #132]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800240c:	4b1f      	ldr	r3, [pc, #124]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a19      	ldr	r1, [r3, #32]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	430b      	orrs	r3, r1
 800241e:	491b      	ldr	r1, [pc, #108]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002426:	2201      	movs	r2, #1
 8002428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242a:	f7ff faf1 	bl	8001a10 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002430:	e008      	b.n	8002444 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002432:	f7ff faed 	bl	8001a10 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	2b02      	cmp	r3, #2
 800243e:	d901      	bls.n	8002444 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002440:	2303      	movs	r3, #3
 8002442:	e03d      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002444:	4b11      	ldr	r3, [pc, #68]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0f0      	beq.n	8002432 <HAL_RCC_OscConfig+0x46a>
 8002450:	e035      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <HAL_RCC_OscConfig+0x4cc>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff fada 	bl	8001a10 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002460:	f7ff fad6 	bl	8001a10 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b02      	cmp	r3, #2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e026      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002472:	4b06      	ldr	r3, [pc, #24]	; (800248c <HAL_RCC_OscConfig+0x4c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d1f0      	bne.n	8002460 <HAL_RCC_OscConfig+0x498>
 800247e:	e01e      	b.n	80024be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d107      	bne.n	8002498 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e019      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
 800248c:	40021000 	.word	0x40021000
 8002490:	40007000 	.word	0x40007000
 8002494:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002498:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <HAL_RCC_OscConfig+0x500>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e000      	b.n	80024c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3718      	adds	r7, #24
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e0d0      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b67      	ldr	r3, [pc, #412]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	4965      	ldr	r1, [pc, #404]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b63      	ldr	r3, [pc, #396]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e0b8      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d020      	beq.n	800255e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d005      	beq.n	8002534 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002528:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002532:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d005      	beq.n	800254c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002540:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4a52      	ldr	r2, [pc, #328]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800254a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	494d      	ldr	r1, [pc, #308]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800255a:	4313      	orrs	r3, r2
 800255c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	2b00      	cmp	r3, #0
 8002568:	d040      	beq.n	80025ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	2b01      	cmp	r3, #1
 8002570:	d107      	bne.n	8002582 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b47      	ldr	r3, [pc, #284]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d115      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e07f      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	2b02      	cmp	r3, #2
 8002588:	d107      	bne.n	800259a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258a:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d109      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e073      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e06b      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025aa:	4b39      	ldr	r3, [pc, #228]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f023 0203 	bic.w	r2, r3, #3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	4936      	ldr	r1, [pc, #216]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	4313      	orrs	r3, r2
 80025ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025bc:	f7ff fa28 	bl	8001a10 <HAL_GetTick>
 80025c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c2:	e00a      	b.n	80025da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c4:	f7ff fa24 	bl	8001a10 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e053      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	4b2d      	ldr	r3, [pc, #180]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f003 020c 	and.w	r2, r3, #12
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d1eb      	bne.n	80025c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d210      	bcs.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b24      	ldr	r3, [pc, #144]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 0207 	bic.w	r2, r3, #7
 8002602:	4922      	ldr	r1, [pc, #136]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e032      	b.n	8002682 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d008      	beq.n	800263a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	4916      	ldr	r1, [pc, #88]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002646:	4b12      	ldr	r3, [pc, #72]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	691b      	ldr	r3, [r3, #16]
 8002652:	00db      	lsls	r3, r3, #3
 8002654:	490e      	ldr	r1, [pc, #56]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002656:	4313      	orrs	r3, r2
 8002658:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265a:	f000 f821 	bl	80026a0 <HAL_RCC_GetSysClockFreq>
 800265e:	4602      	mov	r2, r0
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	f003 030f 	and.w	r3, r3, #15
 800266a:	490a      	ldr	r1, [pc, #40]	; (8002694 <HAL_RCC_ClockConfig+0x1c8>)
 800266c:	5ccb      	ldrb	r3, [r1, r3]
 800266e:	fa22 f303 	lsr.w	r3, r2, r3
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_RCC_ClockConfig+0x1cc>)
 8002674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_RCC_ClockConfig+0x1d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff f986 	bl	800198c <HAL_InitTick>

  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40022000 	.word	0x40022000
 8002690:	40021000 	.word	0x40021000
 8002694:	08002fc4 	.word	0x08002fc4
 8002698:	2000004c 	.word	0x2000004c
 800269c:	20000050 	.word	0x20000050

080026a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b087      	sub	sp, #28
 80026a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	2300      	movs	r3, #0
 80026ac:	60bb      	str	r3, [r7, #8]
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	2300      	movs	r3, #0
 80026b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026ba:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_RCC_GetSysClockFreq+0x94>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b04      	cmp	r3, #4
 80026c8:	d002      	beq.n	80026d0 <HAL_RCC_GetSysClockFreq+0x30>
 80026ca:	2b08      	cmp	r3, #8
 80026cc:	d003      	beq.n	80026d6 <HAL_RCC_GetSysClockFreq+0x36>
 80026ce:	e027      	b.n	8002720 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d0:	4b19      	ldr	r3, [pc, #100]	; (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 80026d2:	613b      	str	r3, [r7, #16]
      break;
 80026d4:	e027      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	0c9b      	lsrs	r3, r3, #18
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	4a17      	ldr	r2, [pc, #92]	; (800273c <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e0:	5cd3      	ldrb	r3, [r2, r3]
 80026e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d010      	beq.n	8002710 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026ee:	4b11      	ldr	r3, [pc, #68]	; (8002734 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	0c5b      	lsrs	r3, r3, #17
 80026f4:	f003 0301 	and.w	r3, r3, #1
 80026f8:	4a11      	ldr	r2, [pc, #68]	; (8002740 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026fa:	5cd3      	ldrb	r3, [r2, r3]
 80026fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a0d      	ldr	r2, [pc, #52]	; (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 8002702:	fb03 f202 	mul.w	r2, r3, r2
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	fbb2 f3f3 	udiv	r3, r2, r3
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e004      	b.n	800271a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	613b      	str	r3, [r7, #16]
      break;
 800271e:	e002      	b.n	8002726 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4b05      	ldr	r3, [pc, #20]	; (8002738 <HAL_RCC_GetSysClockFreq+0x98>)
 8002722:	613b      	str	r3, [r7, #16]
      break;
 8002724:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002726:	693b      	ldr	r3, [r7, #16]
}
 8002728:	4618      	mov	r0, r3
 800272a:	371c      	adds	r7, #28
 800272c:	46bd      	mov	sp, r7
 800272e:	bc80      	pop	{r7}
 8002730:	4770      	bx	lr
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000
 8002738:	007a1200 	.word	0x007a1200
 800273c:	08002fd4 	.word	0x08002fd4
 8002740:	08002fe4 	.word	0x08002fe4
 8002744:	003d0900 	.word	0x003d0900

08002748 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002750:	4b0a      	ldr	r3, [pc, #40]	; (800277c <RCC_Delay+0x34>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0a      	ldr	r2, [pc, #40]	; (8002780 <RCC_Delay+0x38>)
 8002756:	fba2 2303 	umull	r2, r3, r2, r3
 800275a:	0a5b      	lsrs	r3, r3, #9
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	fb02 f303 	mul.w	r3, r2, r3
 8002762:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002764:	bf00      	nop
  }
  while (Delay --);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1e5a      	subs	r2, r3, #1
 800276a:	60fa      	str	r2, [r7, #12]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f9      	bne.n	8002764 <RCC_Delay+0x1c>
}
 8002770:	bf00      	nop
 8002772:	bf00      	nop
 8002774:	3714      	adds	r7, #20
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	2000004c 	.word	0x2000004c
 8002780:	10624dd3 	.word	0x10624dd3

08002784 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e041      	b.n	800281a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f7ff f856 	bl	800185c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2202      	movs	r2, #2
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3304      	adds	r3, #4
 80027c0:	4619      	mov	r1, r3
 80027c2:	4610      	mov	r0, r2
 80027c4:	f000 fa6e 	bl	8002ca4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3708      	adds	r7, #8
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
	...

08002824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b01      	cmp	r3, #1
 8002836:	d001      	beq.n	800283c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e035      	b.n	80028a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2202      	movs	r2, #2
 8002840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0201 	orr.w	r2, r2, #1
 8002852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a16      	ldr	r2, [pc, #88]	; (80028b4 <HAL_TIM_Base_Start_IT+0x90>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x4e>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002866:	d004      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x4e>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a12      	ldr	r2, [pc, #72]	; (80028b8 <HAL_TIM_Base_Start_IT+0x94>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d010      	beq.n	80028a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0201 	orr.w	r2, r2, #1
 8002892:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002894:	e007      	b.n	80028a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3714      	adds	r7, #20
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	40012c00 	.word	0x40012c00
 80028b8:	40000400 	.word	0x40000400

080028bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d122      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	68db      	ldr	r3, [r3, #12]
 80028d8:	f003 0302 	and.w	r3, r3, #2
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d11b      	bne.n	8002918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 0202 	mvn.w	r2, #2
 80028e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d003      	beq.n	8002906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 f9b4 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002904:	e005      	b.n	8002912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f9a7 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800290c:	6878      	ldr	r0, [r7, #4]
 800290e:	f000 f9b6 	bl	8002c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	f003 0304 	and.w	r3, r3, #4
 8002922:	2b04      	cmp	r3, #4
 8002924:	d122      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b04      	cmp	r3, #4
 8002932:	d11b      	bne.n	800296c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f06f 0204 	mvn.w	r2, #4
 800293c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2202      	movs	r2, #2
 8002942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800294e:	2b00      	cmp	r3, #0
 8002950:	d003      	beq.n	800295a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f98a 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002958:	e005      	b.n	8002966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f97d 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 f98c 	bl	8002c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	2b08      	cmp	r3, #8
 8002978:	d122      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b08      	cmp	r3, #8
 8002986:	d11b      	bne.n	80029c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f06f 0208 	mvn.w	r2, #8
 8002990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2204      	movs	r2, #4
 8002996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	69db      	ldr	r3, [r3, #28]
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 f960 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 80029ac:	e005      	b.n	80029ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f953 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f962 	bl	8002c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2200      	movs	r2, #0
 80029be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f003 0310 	and.w	r3, r3, #16
 80029ca:	2b10      	cmp	r3, #16
 80029cc:	d122      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f003 0310 	and.w	r3, r3, #16
 80029d8:	2b10      	cmp	r3, #16
 80029da:	d11b      	bne.n	8002a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f06f 0210 	mvn.w	r2, #16
 80029e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2208      	movs	r2, #8
 80029ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	69db      	ldr	r3, [r3, #28]
 80029f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f936 	bl	8002c6c <HAL_TIM_IC_CaptureCallback>
 8002a00:	e005      	b.n	8002a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	f000 f929 	bl	8002c5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a08:	6878      	ldr	r0, [r7, #4]
 8002a0a:	f000 f938 	bl	8002c7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d10e      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d107      	bne.n	8002a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0201 	mvn.w	r2, #1
 8002a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f7fe fe82 	bl	8001744 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d10e      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a58:	2b80      	cmp	r3, #128	; 0x80
 8002a5a:	d107      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 fa6b 	bl	8002f42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a76:	2b40      	cmp	r3, #64	; 0x40
 8002a78:	d10e      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a84:	2b40      	cmp	r3, #64	; 0x40
 8002a86:	d107      	bne.n	8002a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 f8fc 	bl	8002c90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f003 0320 	and.w	r3, r3, #32
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d10e      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f003 0320 	and.w	r3, r3, #32
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d107      	bne.n	8002ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f06f 0220 	mvn.w	r2, #32
 8002abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fa36 	bl	8002f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIM_ConfigClockSource+0x1c>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e0b4      	b.n	8002c52 <HAL_TIM_ConfigClockSource+0x186>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68ba      	ldr	r2, [r7, #8]
 8002b16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b20:	d03e      	beq.n	8002ba0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b26:	f200 8087 	bhi.w	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2e:	f000 8086 	beq.w	8002c3e <HAL_TIM_ConfigClockSource+0x172>
 8002b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b36:	d87f      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b38:	2b70      	cmp	r3, #112	; 0x70
 8002b3a:	d01a      	beq.n	8002b72 <HAL_TIM_ConfigClockSource+0xa6>
 8002b3c:	2b70      	cmp	r3, #112	; 0x70
 8002b3e:	d87b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b40:	2b60      	cmp	r3, #96	; 0x60
 8002b42:	d050      	beq.n	8002be6 <HAL_TIM_ConfigClockSource+0x11a>
 8002b44:	2b60      	cmp	r3, #96	; 0x60
 8002b46:	d877      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b48:	2b50      	cmp	r3, #80	; 0x50
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_TIM_ConfigClockSource+0xfa>
 8002b4c:	2b50      	cmp	r3, #80	; 0x50
 8002b4e:	d873      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d058      	beq.n	8002c06 <HAL_TIM_ConfigClockSource+0x13a>
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d86f      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b58:	2b30      	cmp	r3, #48	; 0x30
 8002b5a:	d064      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b5c:	2b30      	cmp	r3, #48	; 0x30
 8002b5e:	d86b      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b60:	2b20      	cmp	r3, #32
 8002b62:	d060      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b64:	2b20      	cmp	r3, #32
 8002b66:	d867      	bhi.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d05c      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b6c:	2b10      	cmp	r3, #16
 8002b6e:	d05a      	beq.n	8002c26 <HAL_TIM_ConfigClockSource+0x15a>
 8002b70:	e062      	b.n	8002c38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b82:	f000 f95e 	bl	8002e42 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002b94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	609a      	str	r2, [r3, #8]
      break;
 8002b9e:	e04f      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002bb0:	f000 f947 	bl	8002e42 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689a      	ldr	r2, [r3, #8]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002bc2:	609a      	str	r2, [r3, #8]
      break;
 8002bc4:	e03c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f000 f8be 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2150      	movs	r1, #80	; 0x50
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 f915 	bl	8002e0e <TIM_ITRx_SetConfig>
      break;
 8002be4:	e02c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	f000 f8dc 	bl	8002db0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2160      	movs	r1, #96	; 0x60
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 f905 	bl	8002e0e <TIM_ITRx_SetConfig>
      break;
 8002c04:	e01c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c12:	461a      	mov	r2, r3
 8002c14:	f000 f89e 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2140      	movs	r1, #64	; 0x40
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f8f5 	bl	8002e0e <TIM_ITRx_SetConfig>
      break;
 8002c24:	e00c      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4610      	mov	r0, r2
 8002c32:	f000 f8ec 	bl	8002e0e <TIM_ITRx_SetConfig>
      break;
 8002c36:	e003      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3c:	e000      	b.n	8002c40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr

08002c7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc80      	pop	{r7}
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
	...

08002ca4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <TIM_Base_SetConfig+0xa8>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d007      	beq.n	8002ccc <TIM_Base_SetConfig+0x28>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc2:	d003      	beq.n	8002ccc <TIM_Base_SetConfig+0x28>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a22      	ldr	r2, [pc, #136]	; (8002d50 <TIM_Base_SetConfig+0xac>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d108      	bne.n	8002cde <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	68fa      	ldr	r2, [r7, #12]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <TIM_Base_SetConfig+0xa8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d007      	beq.n	8002cf6 <TIM_Base_SetConfig+0x52>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cec:	d003      	beq.n	8002cf6 <TIM_Base_SetConfig+0x52>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <TIM_Base_SetConfig+0xac>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d108      	bne.n	8002d08 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a07      	ldr	r2, [pc, #28]	; (8002d4c <TIM_Base_SetConfig+0xa8>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d103      	bne.n	8002d3c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	615a      	str	r2, [r3, #20]
}
 8002d42:	bf00      	nop
 8002d44:	3714      	adds	r7, #20
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bc80      	pop	{r7}
 8002d4a:	4770      	bx	lr
 8002d4c:	40012c00 	.word	0x40012c00
 8002d50:	40000400 	.word	0x40000400

08002d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0201 	bic.w	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 030a 	bic.w	r3, r3, #10
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b087      	sub	sp, #28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6a1b      	ldr	r3, [r3, #32]
 8002dc0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	f023 0210 	bic.w	r2, r3, #16
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	031b      	lsls	r3, r3, #12
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4313      	orrs	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dec:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	693a      	ldr	r2, [r7, #16]
 8002dfc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	621a      	str	r2, [r3, #32]
}
 8002e04:	bf00      	nop
 8002e06:	371c      	adds	r7, #28
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b085      	sub	sp, #20
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
 8002e16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f043 0307 	orr.w	r3, r3, #7
 8002e30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68fa      	ldr	r2, [r7, #12]
 8002e36:	609a      	str	r2, [r3, #8]
}
 8002e38:	bf00      	nop
 8002e3a:	3714      	adds	r7, #20
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bc80      	pop	{r7}
 8002e40:	4770      	bx	lr

08002e42 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b087      	sub	sp, #28
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	60f8      	str	r0, [r7, #12]
 8002e4a:	60b9      	str	r1, [r7, #8]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e5c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	021a      	lsls	r2, r3, #8
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	609a      	str	r2, [r3, #8]
}
 8002e76:	bf00      	nop
 8002e78:	371c      	adds	r7, #28
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr

08002e80 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e041      	b.n	8002f1c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68fa      	ldr	r2, [r7, #12]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a14      	ldr	r2, [pc, #80]	; (8002f28 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a10      	ldr	r2, [pc, #64]	; (8002f2c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d10c      	bne.n	8002f0a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3714      	adds	r7, #20
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	40012c00 	.word	0x40012c00
 8002f2c:	40000400 	.word	0x40000400

08002f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bc80      	pop	{r7}
 8002f40:	4770      	bx	lr

08002f42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b083      	sub	sp, #12
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr

08002f54 <memset>:
 8002f54:	4603      	mov	r3, r0
 8002f56:	4402      	add	r2, r0
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d100      	bne.n	8002f5e <memset+0xa>
 8002f5c:	4770      	bx	lr
 8002f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002f62:	e7f9      	b.n	8002f58 <memset+0x4>

08002f64 <__libc_init_array>:
 8002f64:	b570      	push	{r4, r5, r6, lr}
 8002f66:	2600      	movs	r6, #0
 8002f68:	4d0c      	ldr	r5, [pc, #48]	; (8002f9c <__libc_init_array+0x38>)
 8002f6a:	4c0d      	ldr	r4, [pc, #52]	; (8002fa0 <__libc_init_array+0x3c>)
 8002f6c:	1b64      	subs	r4, r4, r5
 8002f6e:	10a4      	asrs	r4, r4, #2
 8002f70:	42a6      	cmp	r6, r4
 8002f72:	d109      	bne.n	8002f88 <__libc_init_array+0x24>
 8002f74:	f000 f81a 	bl	8002fac <_init>
 8002f78:	2600      	movs	r6, #0
 8002f7a:	4d0a      	ldr	r5, [pc, #40]	; (8002fa4 <__libc_init_array+0x40>)
 8002f7c:	4c0a      	ldr	r4, [pc, #40]	; (8002fa8 <__libc_init_array+0x44>)
 8002f7e:	1b64      	subs	r4, r4, r5
 8002f80:	10a4      	asrs	r4, r4, #2
 8002f82:	42a6      	cmp	r6, r4
 8002f84:	d105      	bne.n	8002f92 <__libc_init_array+0x2e>
 8002f86:	bd70      	pop	{r4, r5, r6, pc}
 8002f88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f8c:	4798      	blx	r3
 8002f8e:	3601      	adds	r6, #1
 8002f90:	e7ee      	b.n	8002f70 <__libc_init_array+0xc>
 8002f92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f96:	4798      	blx	r3
 8002f98:	3601      	adds	r6, #1
 8002f9a:	e7f2      	b.n	8002f82 <__libc_init_array+0x1e>
 8002f9c:	08002fe8 	.word	0x08002fe8
 8002fa0:	08002fe8 	.word	0x08002fe8
 8002fa4:	08002fe8 	.word	0x08002fe8
 8002fa8:	08002fec 	.word	0x08002fec

08002fac <_init>:
 8002fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fae:	bf00      	nop
 8002fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fb2:	bc08      	pop	{r3}
 8002fb4:	469e      	mov	lr, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_fini>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr
